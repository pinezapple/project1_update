// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spender.proto

/*
Package Spenderrpc is a generated protocol buffer package.

It is generated from these files:
	spender.proto

It has these top-level messages:
	AddDSpReq
	AddDSpResp
	DelDSpReq
	DelDSpResp
	UpdateDSpReq
	UpdateDSpResp
	SelectAllDSpReq
	SelectAllDSpResp
	SelectByIDDSpReq
	SelectByIDDSpResp
	SelectByCreatedAtDSpReq
	SelectByCreatedAtDSpResp
*/
package Spenderrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddDSpReq struct {
	CreatedBy  string `protobuf:"bytes,1,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	TotalMoney int64  `protobuf:"varint,3,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *AddDSpReq) Reset()                    { *m = AddDSpReq{} }
func (m *AddDSpReq) String() string            { return proto.CompactTextString(m) }
func (*AddDSpReq) ProtoMessage()               {}
func (*AddDSpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDSpReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *AddDSpReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AddDSpReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type AddDSpResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddDSpResp) Reset()                    { *m = AddDSpResp{} }
func (m *AddDSpResp) String() string            { return proto.CompactTextString(m) }
func (*AddDSpResp) ProtoMessage()               {}
func (*AddDSpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddDSpResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelDSpReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelDSpReq) Reset()                    { *m = DelDSpReq{} }
func (m *DelDSpReq) String() string            { return proto.CompactTextString(m) }
func (*DelDSpReq) ProtoMessage()               {}
func (*DelDSpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelDSpReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelDSpResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelDSpResp) Reset()                    { *m = DelDSpResp{} }
func (m *DelDSpResp) String() string            { return proto.CompactTextString(m) }
func (*DelDSpResp) ProtoMessage()               {}
func (*DelDSpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelDSpResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateDSpReq struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreatedBy  string `protobuf:"bytes,2,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Reason     string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	TotalMoney int64  `protobuf:"varint,4,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *UpdateDSpReq) Reset()                    { *m = UpdateDSpReq{} }
func (m *UpdateDSpReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateDSpReq) ProtoMessage()               {}
func (*UpdateDSpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateDSpReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateDSpReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *UpdateDSpReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpdateDSpReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type UpdateDSpResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateDSpResp) Reset()                    { *m = UpdateDSpResp{} }
func (m *UpdateDSpResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateDSpResp) ProtoMessage()               {}
func (*UpdateDSpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateDSpResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllDSpReq struct {
}

func (m *SelectAllDSpReq) Reset()                    { *m = SelectAllDSpReq{} }
func (m *SelectAllDSpReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDSpReq) ProtoMessage()               {}
func (*SelectAllDSpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SelectAllDSpResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllDSpResp) Reset()                    { *m = SelectAllDSpResp{} }
func (m *SelectAllDSpResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDSpResp) ProtoMessage()               {}
func (*SelectAllDSpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectAllDSpResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByIDDSpReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectByIDDSpReq) Reset()                    { *m = SelectByIDDSpReq{} }
func (m *SelectByIDDSpReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDSpReq) ProtoMessage()               {}
func (*SelectByIDDSpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectByIDDSpReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectByIDDSpResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByIDDSpResp) Reset()                    { *m = SelectByIDDSpResp{} }
func (m *SelectByIDDSpResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDSpResp) ProtoMessage()               {}
func (*SelectByIDDSpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectByIDDSpResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByCreatedAtDSpReq struct {
	FromTime int64 `protobuf:"varint,1,opt,name=from_time,json=fromTime" json:"from_time,omitempty"`
	ToTime   int64 `protobuf:"varint,2,opt,name=to_time,json=toTime" json:"to_time,omitempty"`
}

func (m *SelectByCreatedAtDSpReq) Reset()                    { *m = SelectByCreatedAtDSpReq{} }
func (m *SelectByCreatedAtDSpReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDSpReq) ProtoMessage()               {}
func (*SelectByCreatedAtDSpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SelectByCreatedAtDSpReq) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *SelectByCreatedAtDSpReq) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

type SelectByCreatedAtDSpResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByCreatedAtDSpResp) Reset()                    { *m = SelectByCreatedAtDSpResp{} }
func (m *SelectByCreatedAtDSpResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDSpResp) ProtoMessage()               {}
func (*SelectByCreatedAtDSpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectByCreatedAtDSpResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDSpReq)(nil), "Spenderrpc.AddDSpReq")
	proto.RegisterType((*AddDSpResp)(nil), "Spenderrpc.AddDSpResp")
	proto.RegisterType((*DelDSpReq)(nil), "Spenderrpc.DelDSpReq")
	proto.RegisterType((*DelDSpResp)(nil), "Spenderrpc.DelDSpResp")
	proto.RegisterType((*UpdateDSpReq)(nil), "Spenderrpc.UpdateDSpReq")
	proto.RegisterType((*UpdateDSpResp)(nil), "Spenderrpc.UpdateDSpResp")
	proto.RegisterType((*SelectAllDSpReq)(nil), "Spenderrpc.SelectAllDSpReq")
	proto.RegisterType((*SelectAllDSpResp)(nil), "Spenderrpc.SelectAllDSpResp")
	proto.RegisterType((*SelectByIDDSpReq)(nil), "Spenderrpc.SelectByIDDSpReq")
	proto.RegisterType((*SelectByIDDSpResp)(nil), "Spenderrpc.SelectByIDDSpResp")
	proto.RegisterType((*SelectByCreatedAtDSpReq)(nil), "Spenderrpc.SelectByCreatedAtDSpReq")
	proto.RegisterType((*SelectByCreatedAtDSpResp)(nil), "Spenderrpc.SelectByCreatedAtDSpResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Spender service

type SpenderClient interface {
	AddDSp(ctx context.Context, in *AddDSpReq, opts ...grpc.CallOption) (*AddDSpResp, error)
	DelDSp(ctx context.Context, in *DelDSpReq, opts ...grpc.CallOption) (*DelDSpResp, error)
	UpdateDSp(ctx context.Context, in *UpdateDSpReq, opts ...grpc.CallOption) (*UpdateDSpResp, error)
	SelectAllDSp(ctx context.Context, in *SelectAllDSpReq, opts ...grpc.CallOption) (*SelectAllDSpResp, error)
	SelectByIDDSp(ctx context.Context, in *SelectByIDDSpReq, opts ...grpc.CallOption) (*SelectByIDDSpResp, error)
	SelectByCreatedAtDSp(ctx context.Context, in *SelectByCreatedAtDSpReq, opts ...grpc.CallOption) (*SelectByCreatedAtDSpResp, error)
}

type spenderClient struct {
	cc *grpc.ClientConn
}

func NewSpenderClient(cc *grpc.ClientConn) SpenderClient {
	return &spenderClient{cc}
}

func (c *spenderClient) AddDSp(ctx context.Context, in *AddDSpReq, opts ...grpc.CallOption) (*AddDSpResp, error) {
	out := new(AddDSpResp)
	err := grpc.Invoke(ctx, "/Spenderrpc.spender/AddDSp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spenderClient) DelDSp(ctx context.Context, in *DelDSpReq, opts ...grpc.CallOption) (*DelDSpResp, error) {
	out := new(DelDSpResp)
	err := grpc.Invoke(ctx, "/Spenderrpc.spender/DelDSp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spenderClient) UpdateDSp(ctx context.Context, in *UpdateDSpReq, opts ...grpc.CallOption) (*UpdateDSpResp, error) {
	out := new(UpdateDSpResp)
	err := grpc.Invoke(ctx, "/Spenderrpc.spender/UpdateDSp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spenderClient) SelectAllDSp(ctx context.Context, in *SelectAllDSpReq, opts ...grpc.CallOption) (*SelectAllDSpResp, error) {
	out := new(SelectAllDSpResp)
	err := grpc.Invoke(ctx, "/Spenderrpc.spender/SelectAllDSp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spenderClient) SelectByIDDSp(ctx context.Context, in *SelectByIDDSpReq, opts ...grpc.CallOption) (*SelectByIDDSpResp, error) {
	out := new(SelectByIDDSpResp)
	err := grpc.Invoke(ctx, "/Spenderrpc.spender/SelectByIDDSp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spenderClient) SelectByCreatedAtDSp(ctx context.Context, in *SelectByCreatedAtDSpReq, opts ...grpc.CallOption) (*SelectByCreatedAtDSpResp, error) {
	out := new(SelectByCreatedAtDSpResp)
	err := grpc.Invoke(ctx, "/Spenderrpc.spender/SelectByCreatedAtDSp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spender service

type SpenderServer interface {
	AddDSp(context.Context, *AddDSpReq) (*AddDSpResp, error)
	DelDSp(context.Context, *DelDSpReq) (*DelDSpResp, error)
	UpdateDSp(context.Context, *UpdateDSpReq) (*UpdateDSpResp, error)
	SelectAllDSp(context.Context, *SelectAllDSpReq) (*SelectAllDSpResp, error)
	SelectByIDDSp(context.Context, *SelectByIDDSpReq) (*SelectByIDDSpResp, error)
	SelectByCreatedAtDSp(context.Context, *SelectByCreatedAtDSpReq) (*SelectByCreatedAtDSpResp, error)
}

func RegisterSpenderServer(s *grpc.Server, srv SpenderServer) {
	s.RegisterService(&_Spender_serviceDesc, srv)
}

func _Spender_AddDSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpenderServer).AddDSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spenderrpc.spender/AddDSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpenderServer).AddDSp(ctx, req.(*AddDSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spender_DelDSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpenderServer).DelDSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spenderrpc.spender/DelDSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpenderServer).DelDSp(ctx, req.(*DelDSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spender_UpdateDSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpenderServer).UpdateDSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spenderrpc.spender/UpdateDSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpenderServer).UpdateDSp(ctx, req.(*UpdateDSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spender_SelectAllDSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpenderServer).SelectAllDSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spenderrpc.spender/SelectAllDSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpenderServer).SelectAllDSp(ctx, req.(*SelectAllDSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spender_SelectByIDDSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIDDSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpenderServer).SelectByIDDSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spenderrpc.spender/SelectByIDDSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpenderServer).SelectByIDDSp(ctx, req.(*SelectByIDDSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spender_SelectByCreatedAtDSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByCreatedAtDSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpenderServer).SelectByCreatedAtDSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Spenderrpc.spender/SelectByCreatedAtDSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpenderServer).SelectByCreatedAtDSp(ctx, req.(*SelectByCreatedAtDSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Spenderrpc.spender",
	HandlerType: (*SpenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDSp",
			Handler:    _Spender_AddDSp_Handler,
		},
		{
			MethodName: "DelDSp",
			Handler:    _Spender_DelDSp_Handler,
		},
		{
			MethodName: "UpdateDSp",
			Handler:    _Spender_UpdateDSp_Handler,
		},
		{
			MethodName: "SelectAllDSp",
			Handler:    _Spender_SelectAllDSp_Handler,
		},
		{
			MethodName: "SelectByIDDSp",
			Handler:    _Spender_SelectByIDDSp_Handler,
		},
		{
			MethodName: "SelectByCreatedAtDSp",
			Handler:    _Spender_SelectByCreatedAtDSp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spender.proto",
}

func init() { proto.RegisterFile("spender.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x51, 0x4f, 0xa3, 0x40,
	0x10, 0x4e, 0xe1, 0x02, 0x65, 0xae, 0xbd, 0xbb, 0x6e, 0xee, 0x5a, 0x8e, 0x5e, 0x73, 0x0d, 0x77,
	0x31, 0x35, 0xd1, 0x3e, 0xa8, 0x89, 0xaf, 0xb6, 0xf6, 0xa5, 0x89, 0x46, 0x03, 0xfa, 0xdc, 0x50,
	0x58, 0x13, 0x12, 0xe8, 0xae, 0xec, 0x6a, 0xc2, 0x4f, 0xf3, 0xdf, 0x19, 0x58, 0x68, 0x01, 0x01,
	0x1f, 0x67, 0xbe, 0x6f, 0xbe, 0x99, 0xd9, 0xf9, 0xb2, 0xd0, 0x67, 0x14, 0xef, 0x3c, 0x1c, 0xcd,
	0x69, 0x44, 0x38, 0x41, 0x60, 0x8b, 0x30, 0xa2, 0xae, 0xe9, 0x82, 0xb6, 0xf0, 0xbc, 0x95, 0x4d,
	0x2d, 0xfc, 0x8c, 0x26, 0x00, 0x6e, 0x84, 0x1d, 0x8e, 0xbd, 0xcd, 0x36, 0xd6, 0x3b, 0xd3, 0xce,
	0x4c, 0xb3, 0xb4, 0x2c, 0xb3, 0x8c, 0xd1, 0x10, 0x94, 0x08, 0x3b, 0x8c, 0xec, 0x74, 0x29, 0x85,
	0xb2, 0x08, 0xfd, 0x85, 0xaf, 0x9c, 0x70, 0x27, 0xd8, 0x84, 0x64, 0x87, 0x63, 0x5d, 0x9e, 0x76,
	0x66, 0xb2, 0x05, 0x69, 0xea, 0x36, 0xc9, 0x98, 0x47, 0x00, 0x79, 0x13, 0x46, 0x91, 0x0e, 0xaa,
	0xfd, 0xe2, 0xba, 0x98, 0xb1, 0xb4, 0x45, 0xd7, 0x52, 0x99, 0x08, 0xcd, 0x31, 0x68, 0x2b, 0x1c,
	0x64, 0xc3, 0x7c, 0x03, 0xc9, 0xf7, 0x52, 0x86, 0x6c, 0x49, 0xbe, 0x97, 0x88, 0xe4, 0x60, 0xab,
	0xc8, 0x2b, 0xf4, 0x1e, 0xa9, 0xe7, 0x70, 0x5c, 0xaf, 0x53, 0x59, 0x52, 0x6a, 0x5e, 0x52, 0x6e,
	0x5b, 0xf2, 0xcb, 0x87, 0x25, 0x8f, 0xa1, 0x5f, 0xe8, 0xdb, 0x3a, 0xe2, 0x00, 0xbe, 0xdb, 0x38,
	0xc0, 0x2e, 0x5f, 0x04, 0xd9, 0xb6, 0xe6, 0x09, 0xfc, 0x28, 0xa7, 0x84, 0xc0, 0xbd, 0x13, 0x07,
	0xc4, 0x11, 0xe3, 0xf7, 0x2c, 0x95, 0x8a, 0xd0, 0x34, 0x73, 0xf6, 0x32, 0x5e, 0xaf, 0x1a, 0xde,
	0xeb, 0x14, 0x06, 0x15, 0x4e, 0xab, 0xe4, 0x1d, 0x8c, 0x72, 0xfa, 0xb5, 0x78, 0x8c, 0x05, 0xcf,
	0x94, 0xc7, 0xa0, 0x3d, 0x45, 0x24, 0xdc, 0x70, 0x3f, 0xc4, 0x59, 0x83, 0x6e, 0x92, 0x78, 0xf0,
	0x43, 0x8c, 0x46, 0xa0, 0x72, 0x22, 0x20, 0x29, 0x85, 0x14, 0x4e, 0x12, 0xc0, 0xbc, 0x00, 0xbd,
	0x5e, 0xb0, 0x6d, 0x8c, 0xb3, 0x37, 0x19, 0xd4, 0xcc, 0xad, 0xe8, 0x12, 0x14, 0x61, 0x1b, 0xf4,
	0x6b, 0x7e, 0xb0, 0xec, 0x7c, 0xef, 0x57, 0x63, 0x58, 0x97, 0x66, 0x34, 0x29, 0x14, 0x56, 0x29,
	0x17, 0xee, 0xbd, 0x55, 0x2e, 0x2c, 0xb8, 0xea, 0x0a, 0xb4, 0xfd, 0x0d, 0x91, 0x5e, 0x24, 0x15,
	0x2d, 0x65, 0xfc, 0x6e, 0x40, 0x18, 0x45, 0x6b, 0xe8, 0x15, 0xef, 0x88, 0xc6, 0x45, 0x6a, 0xe5,
	0xe8, 0xc6, 0x9f, 0x66, 0x90, 0x51, 0x74, 0x03, 0xfd, 0xd2, 0x01, 0x51, 0x0d, 0xfd, 0x70, 0x7f,
	0x63, 0xd2, 0x82, 0x32, 0x8a, 0x1c, 0xf8, 0x59, 0x77, 0x0e, 0xf4, 0xaf, 0xae, 0xac, 0xe2, 0x00,
	0xe3, 0xff, 0xe7, 0x24, 0x46, 0xb7, 0x4a, 0xfa, 0xbd, 0x9c, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xca, 0x6a, 0xd7, 0xa4, 0x6f, 0x04, 0x00, 0x00,
}
