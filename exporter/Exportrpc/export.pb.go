// Code generated by protoc-gen-go. DO NOT EDIT.
// source: export.proto

/*
Package Exportrpc is a generated protocol buffer package.

It is generated from these files:
	export.proto

It has these top-level messages:
	AddDEReq
	AddDEResp
	DelDEReq
	DelDEResp
	UpdateDEReq
	UpdateDEResp
	SelectAllDEReq
	SelectAllDEResp
	SelectByIDDEReq
	SelectByIDDEResp
	SelectByCreatedAtDEReq
	SelectByCreatedAtDEResp
*/
package Exportrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddDEReq struct {
	CreatedBy      string `protobuf:"bytes,1,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Reason         string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	GoodList       []byte `protobuf:"bytes,3,opt,name=good_list,json=goodList,proto3" json:"good_list,omitempty"`
	GoodListAmount []byte `protobuf:"bytes,4,opt,name=good_list_amount,json=goodListAmount,proto3" json:"good_list_amount,omitempty"`
	TotalMoney     int64  `protobuf:"varint,5,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *AddDEReq) Reset()                    { *m = AddDEReq{} }
func (m *AddDEReq) String() string            { return proto.CompactTextString(m) }
func (*AddDEReq) ProtoMessage()               {}
func (*AddDEReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDEReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *AddDEReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AddDEReq) GetGoodList() []byte {
	if m != nil {
		return m.GoodList
	}
	return nil
}

func (m *AddDEReq) GetGoodListAmount() []byte {
	if m != nil {
		return m.GoodListAmount
	}
	return nil
}

func (m *AddDEReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type AddDEResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddDEResp) Reset()                    { *m = AddDEResp{} }
func (m *AddDEResp) String() string            { return proto.CompactTextString(m) }
func (*AddDEResp) ProtoMessage()               {}
func (*AddDEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddDEResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelDEReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelDEReq) Reset()                    { *m = DelDEReq{} }
func (m *DelDEReq) String() string            { return proto.CompactTextString(m) }
func (*DelDEReq) ProtoMessage()               {}
func (*DelDEReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelDEReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelDEResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelDEResp) Reset()                    { *m = DelDEResp{} }
func (m *DelDEResp) String() string            { return proto.CompactTextString(m) }
func (*DelDEResp) ProtoMessage()               {}
func (*DelDEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelDEResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateDEReq struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreatedBy      string `protobuf:"bytes,2,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Reason         string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	GoodList       []byte `protobuf:"bytes,4,opt,name=good_list,json=goodList,proto3" json:"good_list,omitempty"`
	GoodListAmount []byte `protobuf:"bytes,5,opt,name=good_list_amount,json=goodListAmount,proto3" json:"good_list_amount,omitempty"`
	TotalMoney     int64  `protobuf:"varint,6,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *UpdateDEReq) Reset()                    { *m = UpdateDEReq{} }
func (m *UpdateDEReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateDEReq) ProtoMessage()               {}
func (*UpdateDEReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateDEReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateDEReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *UpdateDEReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpdateDEReq) GetGoodList() []byte {
	if m != nil {
		return m.GoodList
	}
	return nil
}

func (m *UpdateDEReq) GetGoodListAmount() []byte {
	if m != nil {
		return m.GoodListAmount
	}
	return nil
}

func (m *UpdateDEReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type UpdateDEResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateDEResp) Reset()                    { *m = UpdateDEResp{} }
func (m *UpdateDEResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateDEResp) ProtoMessage()               {}
func (*UpdateDEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateDEResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllDEReq struct {
}

func (m *SelectAllDEReq) Reset()                    { *m = SelectAllDEReq{} }
func (m *SelectAllDEReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDEReq) ProtoMessage()               {}
func (*SelectAllDEReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SelectAllDEResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllDEResp) Reset()                    { *m = SelectAllDEResp{} }
func (m *SelectAllDEResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDEResp) ProtoMessage()               {}
func (*SelectAllDEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectAllDEResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByIDDEReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectByIDDEReq) Reset()                    { *m = SelectByIDDEReq{} }
func (m *SelectByIDDEReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDEReq) ProtoMessage()               {}
func (*SelectByIDDEReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectByIDDEReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectByIDDEResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByIDDEResp) Reset()                    { *m = SelectByIDDEResp{} }
func (m *SelectByIDDEResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDEResp) ProtoMessage()               {}
func (*SelectByIDDEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectByIDDEResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByCreatedAtDEReq struct {
	FromTime int64 `protobuf:"varint,1,opt,name=from_time,json=fromTime" json:"from_time,omitempty"`
	ToTime   int64 `protobuf:"varint,2,opt,name=to_time,json=toTime" json:"to_time,omitempty"`
}

func (m *SelectByCreatedAtDEReq) Reset()                    { *m = SelectByCreatedAtDEReq{} }
func (m *SelectByCreatedAtDEReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDEReq) ProtoMessage()               {}
func (*SelectByCreatedAtDEReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SelectByCreatedAtDEReq) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *SelectByCreatedAtDEReq) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

type SelectByCreatedAtDEResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByCreatedAtDEResp) Reset()                    { *m = SelectByCreatedAtDEResp{} }
func (m *SelectByCreatedAtDEResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDEResp) ProtoMessage()               {}
func (*SelectByCreatedAtDEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectByCreatedAtDEResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDEReq)(nil), "Exportrpc.AddDEReq")
	proto.RegisterType((*AddDEResp)(nil), "Exportrpc.AddDEResp")
	proto.RegisterType((*DelDEReq)(nil), "Exportrpc.DelDEReq")
	proto.RegisterType((*DelDEResp)(nil), "Exportrpc.DelDEResp")
	proto.RegisterType((*UpdateDEReq)(nil), "Exportrpc.UpdateDEReq")
	proto.RegisterType((*UpdateDEResp)(nil), "Exportrpc.UpdateDEResp")
	proto.RegisterType((*SelectAllDEReq)(nil), "Exportrpc.SelectAllDEReq")
	proto.RegisterType((*SelectAllDEResp)(nil), "Exportrpc.SelectAllDEResp")
	proto.RegisterType((*SelectByIDDEReq)(nil), "Exportrpc.SelectByIDDEReq")
	proto.RegisterType((*SelectByIDDEResp)(nil), "Exportrpc.SelectByIDDEResp")
	proto.RegisterType((*SelectByCreatedAtDEReq)(nil), "Exportrpc.SelectByCreatedAtDEReq")
	proto.RegisterType((*SelectByCreatedAtDEResp)(nil), "Exportrpc.SelectByCreatedAtDEResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Exporter service

type ExporterClient interface {
	AddDE(ctx context.Context, in *AddDEReq, opts ...grpc.CallOption) (*AddDEResp, error)
	DelDE(ctx context.Context, in *DelDEReq, opts ...grpc.CallOption) (*DelDEResp, error)
	UpdateDE(ctx context.Context, in *UpdateDEReq, opts ...grpc.CallOption) (*UpdateDEResp, error)
	SelectAllDE(ctx context.Context, in *SelectAllDEReq, opts ...grpc.CallOption) (*SelectAllDEResp, error)
	SelectByIDDE(ctx context.Context, in *SelectByIDDEReq, opts ...grpc.CallOption) (*SelectByIDDEResp, error)
	SelectByCreatedAtDE(ctx context.Context, in *SelectByCreatedAtDEReq, opts ...grpc.CallOption) (*SelectByCreatedAtDEResp, error)
}

type exporterClient struct {
	cc *grpc.ClientConn
}

func NewExporterClient(cc *grpc.ClientConn) ExporterClient {
	return &exporterClient{cc}
}

func (c *exporterClient) AddDE(ctx context.Context, in *AddDEReq, opts ...grpc.CallOption) (*AddDEResp, error) {
	out := new(AddDEResp)
	err := grpc.Invoke(ctx, "/Exportrpc.exporter/AddDE", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) DelDE(ctx context.Context, in *DelDEReq, opts ...grpc.CallOption) (*DelDEResp, error) {
	out := new(DelDEResp)
	err := grpc.Invoke(ctx, "/Exportrpc.exporter/DelDE", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) UpdateDE(ctx context.Context, in *UpdateDEReq, opts ...grpc.CallOption) (*UpdateDEResp, error) {
	out := new(UpdateDEResp)
	err := grpc.Invoke(ctx, "/Exportrpc.exporter/UpdateDE", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) SelectAllDE(ctx context.Context, in *SelectAllDEReq, opts ...grpc.CallOption) (*SelectAllDEResp, error) {
	out := new(SelectAllDEResp)
	err := grpc.Invoke(ctx, "/Exportrpc.exporter/SelectAllDE", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) SelectByIDDE(ctx context.Context, in *SelectByIDDEReq, opts ...grpc.CallOption) (*SelectByIDDEResp, error) {
	out := new(SelectByIDDEResp)
	err := grpc.Invoke(ctx, "/Exportrpc.exporter/SelectByIDDE", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exporterClient) SelectByCreatedAtDE(ctx context.Context, in *SelectByCreatedAtDEReq, opts ...grpc.CallOption) (*SelectByCreatedAtDEResp, error) {
	out := new(SelectByCreatedAtDEResp)
	err := grpc.Invoke(ctx, "/Exportrpc.exporter/SelectByCreatedAtDE", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Exporter service

type ExporterServer interface {
	AddDE(context.Context, *AddDEReq) (*AddDEResp, error)
	DelDE(context.Context, *DelDEReq) (*DelDEResp, error)
	UpdateDE(context.Context, *UpdateDEReq) (*UpdateDEResp, error)
	SelectAllDE(context.Context, *SelectAllDEReq) (*SelectAllDEResp, error)
	SelectByIDDE(context.Context, *SelectByIDDEReq) (*SelectByIDDEResp, error)
	SelectByCreatedAtDE(context.Context, *SelectByCreatedAtDEReq) (*SelectByCreatedAtDEResp, error)
}

func RegisterExporterServer(s *grpc.Server, srv ExporterServer) {
	s.RegisterService(&_Exporter_serviceDesc, srv)
}

func _Exporter_AddDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDEReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).AddDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Exportrpc.exporter/AddDE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).AddDE(ctx, req.(*AddDEReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_DelDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDEReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).DelDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Exportrpc.exporter/DelDE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).DelDE(ctx, req.(*DelDEReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_UpdateDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDEReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).UpdateDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Exportrpc.exporter/UpdateDE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).UpdateDE(ctx, req.(*UpdateDEReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_SelectAllDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDEReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).SelectAllDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Exportrpc.exporter/SelectAllDE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).SelectAllDE(ctx, req.(*SelectAllDEReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_SelectByIDDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIDDEReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).SelectByIDDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Exportrpc.exporter/SelectByIDDE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).SelectByIDDE(ctx, req.(*SelectByIDDEReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exporter_SelectByCreatedAtDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByCreatedAtDEReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServer).SelectByCreatedAtDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Exportrpc.exporter/SelectByCreatedAtDE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServer).SelectByCreatedAtDE(ctx, req.(*SelectByCreatedAtDEReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Exporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Exportrpc.exporter",
	HandlerType: (*ExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDE",
			Handler:    _Exporter_AddDE_Handler,
		},
		{
			MethodName: "DelDE",
			Handler:    _Exporter_DelDE_Handler,
		},
		{
			MethodName: "UpdateDE",
			Handler:    _Exporter_UpdateDE_Handler,
		},
		{
			MethodName: "SelectAllDE",
			Handler:    _Exporter_SelectAllDE_Handler,
		},
		{
			MethodName: "SelectByIDDE",
			Handler:    _Exporter_SelectByIDDE_Handler,
		},
		{
			MethodName: "SelectByCreatedAtDE",
			Handler:    _Exporter_SelectByCreatedAtDE_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "export.proto",
}

func init() { proto.RegisterFile("export.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x25, 0xc9, 0xb6, 0x4d, 0x6e, 0x43, 0x2d, 0x77, 0xa5, 0x8d, 0x29, 0x62, 0x37, 0x20, 0x04,
	0x94, 0x3e, 0xec, 0x3e, 0xfa, 0xd4, 0xb5, 0x8b, 0x08, 0x2a, 0x92, 0xd5, 0x37, 0x21, 0x64, 0x93,
	0x51, 0x02, 0x49, 0x67, 0xcc, 0xcc, 0x82, 0xf9, 0x17, 0x7f, 0xc0, 0x7f, 0xf0, 0xe3, 0x24, 0x33,
	0x49, 0x37, 0xb1, 0x69, 0xb7, 0x8f, 0xf7, 0x9c, 0x73, 0x0f, 0x37, 0xe7, 0xde, 0x09, 0xd8, 0xe4,
	0x17, 0xa3, 0x85, 0x58, 0xb1, 0x82, 0x0a, 0x8a, 0xd6, 0x8d, 0xac, 0x0a, 0x16, 0x7b, 0x7f, 0x34,
	0x30, 0xd7, 0x49, 0xb2, 0xb9, 0x09, 0xc8, 0x4f, 0x7c, 0x0e, 0x10, 0x17, 0x24, 0x12, 0x24, 0x09,
	0xef, 0x4a, 0x47, 0x5b, 0x6a, 0xbe, 0x15, 0x58, 0x35, 0x72, 0x5d, 0xe2, 0x0c, 0x86, 0x05, 0x89,
	0x38, 0xdd, 0x3a, 0xba, 0xa4, 0xea, 0x0a, 0x17, 0x60, 0xfd, 0xa0, 0x34, 0x09, 0xb3, 0x94, 0x0b,
	0xc7, 0x58, 0x6a, 0xbe, 0x1d, 0x98, 0x15, 0xf0, 0x21, 0xe5, 0x02, 0x7d, 0x98, 0xee, 0xc8, 0x30,
	0xca, 0xe9, 0xfd, 0x56, 0x38, 0x67, 0x52, 0x33, 0x69, 0x34, 0x6b, 0x89, 0xe2, 0x0b, 0x18, 0x0b,
	0x2a, 0xa2, 0x2c, 0xcc, 0xe9, 0x96, 0x94, 0xce, 0x60, 0xa9, 0xf9, 0x46, 0x00, 0x12, 0xfa, 0x58,
	0x21, 0xde, 0x4b, 0xb0, 0xea, 0x51, 0x39, 0x43, 0x07, 0x46, 0xb7, 0xf7, 0x71, 0x4c, 0x38, 0x97,
	0x83, 0x9a, 0xc1, 0x88, 0xab, 0xd2, 0x73, 0xc1, 0xdc, 0x90, 0x4c, 0x7d, 0xd1, 0x04, 0xf4, 0x34,
	0x91, 0x02, 0x23, 0xd0, 0xd3, 0xa4, 0xb2, 0xa8, 0xb9, 0xa3, 0x16, 0x7f, 0x35, 0x18, 0x7f, 0x65,
	0x49, 0x24, 0x48, 0xaf, 0xcd, 0x7f, 0x41, 0xe9, 0x87, 0x83, 0x32, 0x0e, 0x07, 0x75, 0x76, 0x42,
	0x50, 0x83, 0x53, 0x82, 0x1a, 0xee, 0x05, 0xe5, 0x83, 0xfd, 0x30, 0xfd, 0xd1, 0x0f, 0x9d, 0xc2,
	0xe4, 0x96, 0x64, 0x24, 0x16, 0xeb, 0x4c, 0x25, 0xe6, 0xbd, 0x82, 0x27, 0x1d, 0x44, 0xb5, 0x7f,
	0x8e, 0xca, 0x8c, 0x46, 0x2a, 0x02, 0x3b, 0x18, 0x31, 0x55, 0x7a, 0x17, 0x8d, 0xf8, 0xba, 0x7c,
	0xbf, 0xe9, 0x4f, 0xfc, 0x35, 0x4c, 0xbb, 0x92, 0xa3, 0x86, 0x9f, 0x60, 0xd6, 0xa8, 0xdf, 0xaa,
	0x38, 0xd7, 0x42, 0xf9, 0x2e, 0xc0, 0xfa, 0x5e, 0xd0, 0x3c, 0x14, 0x69, 0x4e, 0x6a, 0x7b, 0xb3,
	0x02, 0xbe, 0xa4, 0x39, 0xc1, 0x39, 0x8c, 0x04, 0x55, 0x94, 0x2e, 0xa9, 0xa1, 0xa0, 0x15, 0xe1,
	0x5d, 0xc1, 0xbc, 0xd7, 0xef, 0xd8, 0x10, 0x97, 0xbf, 0x0d, 0x30, 0xd5, 0x7b, 0x21, 0x05, 0x5e,
	0xc2, 0x40, 0x1e, 0x1d, 0x9e, 0xaf, 0x76, 0xaf, 0x66, 0xd5, 0xbc, 0x18, 0xf7, 0xe9, 0x3e, 0xc8,
	0x59, 0xd5, 0x23, 0xaf, 0xac, 0xd3, 0xd3, 0xdc, 0x64, 0xa7, 0xe7, 0xe1, 0x18, 0xdf, 0x80, 0xd9,
	0xec, 0x0c, 0x67, 0x2d, 0x45, 0xeb, 0x0c, 0xdd, 0x79, 0x2f, 0xce, 0x19, 0x6e, 0x60, 0xdc, 0x5a,
	0x1a, 0x3e, 0x6b, 0xe9, 0xba, 0xeb, 0x75, 0xdd, 0x43, 0x14, 0x67, 0xf8, 0x0e, 0xec, 0xf6, 0xaa,
	0x70, 0x5f, 0xbb, 0x5b, 0xb3, 0xbb, 0x38, 0xc8, 0x71, 0x86, 0xdf, 0xe0, 0xbc, 0x27, 0x75, 0xbc,
	0xe8, 0xe9, 0xe9, 0x6e, 0xd9, 0xf5, 0x1e, 0x93, 0x70, 0x76, 0x37, 0x94, 0x3f, 0xb1, 0xab, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xf4, 0x58, 0x1a, 0xd4, 0x04, 0x00, 0x00,
}
