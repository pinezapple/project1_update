// Code generated by protoc-gen-go. DO NOT EDIT.
// source: staff.proto

/*
Package StaffDBrpc is a generated protocol buffer package.

It is generated from these files:
	staff.proto

It has these top-level messages:
	AddReq
	AddResp
	UpdateReq
	UpdateResp
	DelReq
	DelResp
	IfExistReq
	IfExistResp
	SelectAllReq
	SelectAllResp
	SelectByIDReq
	SelectByIDResp
*/
package StaffDBrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddReq struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Passwd   string `protobuf:"bytes,3,opt,name=passwd" json:"passwd,omitempty"`
	Position int64  `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
}

func (m *AddReq) Reset()                    { *m = AddReq{} }
func (m *AddReq) String() string            { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()               {}
func (*AddReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *AddReq) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type AddResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddResp) Reset()                    { *m = AddResp{} }
func (m *AddResp) String() string            { return proto.CompactTextString(m) }
func (*AddResp) ProtoMessage()               {}
func (*AddResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateReq struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Passwd   string `protobuf:"bytes,3,opt,name=passwd" json:"passwd,omitempty"`
	Position int64  `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
}

func (m *UpdateReq) Reset()                    { *m = UpdateReq{} }
func (m *UpdateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()               {}
func (*UpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *UpdateReq) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type UpdateResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateResp) Reset()                    { *m = UpdateResp{} }
func (m *UpdateResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateResp) ProtoMessage()               {}
func (*UpdateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelReq) Reset()                    { *m = DelReq{} }
func (m *DelReq) String() string            { return proto.CompactTextString(m) }
func (*DelReq) ProtoMessage()               {}
func (*DelReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelResp) Reset()                    { *m = DelResp{} }
func (m *DelResp) String() string            { return proto.CompactTextString(m) }
func (*DelResp) ProtoMessage()               {}
func (*DelResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DelResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type IfExistReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IfExistReq) Reset()                    { *m = IfExistReq{} }
func (m *IfExistReq) String() string            { return proto.CompactTextString(m) }
func (*IfExistReq) ProtoMessage()               {}
func (*IfExistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IfExistReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IfExistResp struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *IfExistResp) Reset()                    { *m = IfExistResp{} }
func (m *IfExistResp) String() string            { return proto.CompactTextString(m) }
func (*IfExistResp) ProtoMessage()               {}
func (*IfExistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IfExistResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SelectAllReq struct {
}

func (m *SelectAllReq) Reset()                    { *m = SelectAllReq{} }
func (m *SelectAllReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllReq) ProtoMessage()               {}
func (*SelectAllReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SelectAllResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SelectAllResp) Reset()                    { *m = SelectAllResp{} }
func (m *SelectAllResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllResp) ProtoMessage()               {}
func (*SelectAllResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectAllResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByIDReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectByIDReq) Reset()                    { *m = SelectByIDReq{} }
func (m *SelectByIDReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDReq) ProtoMessage()               {}
func (*SelectByIDReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SelectByIDReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectByIDResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SelectByIDResp) Reset()                    { *m = SelectByIDResp{} }
func (m *SelectByIDResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDResp) ProtoMessage()               {}
func (*SelectByIDResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectByIDResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddReq)(nil), "StaffDBrpc.AddReq")
	proto.RegisterType((*AddResp)(nil), "StaffDBrpc.AddResp")
	proto.RegisterType((*UpdateReq)(nil), "StaffDBrpc.UpdateReq")
	proto.RegisterType((*UpdateResp)(nil), "StaffDBrpc.UpdateResp")
	proto.RegisterType((*DelReq)(nil), "StaffDBrpc.DelReq")
	proto.RegisterType((*DelResp)(nil), "StaffDBrpc.DelResp")
	proto.RegisterType((*IfExistReq)(nil), "StaffDBrpc.IfExistReq")
	proto.RegisterType((*IfExistResp)(nil), "StaffDBrpc.IfExistResp")
	proto.RegisterType((*SelectAllReq)(nil), "StaffDBrpc.SelectAllReq")
	proto.RegisterType((*SelectAllResp)(nil), "StaffDBrpc.SelectAllResp")
	proto.RegisterType((*SelectByIDReq)(nil), "StaffDBrpc.SelectByIDReq")
	proto.RegisterType((*SelectByIDResp)(nil), "StaffDBrpc.SelectByIDResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Staff service

type StaffClient interface {
	AddStaff(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	UpdateStaff(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	DelStaff(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error)
	IfStaffExist(ctx context.Context, in *IfExistReq, opts ...grpc.CallOption) (*IfExistResp, error)
	SelectAllStaff(ctx context.Context, in *SelectAllReq, opts ...grpc.CallOption) (*SelectAllResp, error)
	SelectByStaffID(ctx context.Context, in *SelectByIDReq, opts ...grpc.CallOption) (*SelectByIDResp, error)
}

type staffClient struct {
	cc *grpc.ClientConn
}

func NewStaffClient(cc *grpc.ClientConn) StaffClient {
	return &staffClient{cc}
}

func (c *staffClient) AddStaff(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := grpc.Invoke(ctx, "/StaffDBrpc.staff/AddStaff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) UpdateStaff(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := grpc.Invoke(ctx, "/StaffDBrpc.staff/UpdateStaff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) DelStaff(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error) {
	out := new(DelResp)
	err := grpc.Invoke(ctx, "/StaffDBrpc.staff/DelStaff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) IfStaffExist(ctx context.Context, in *IfExistReq, opts ...grpc.CallOption) (*IfExistResp, error) {
	out := new(IfExistResp)
	err := grpc.Invoke(ctx, "/StaffDBrpc.staff/IfStaffExist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) SelectAllStaff(ctx context.Context, in *SelectAllReq, opts ...grpc.CallOption) (*SelectAllResp, error) {
	out := new(SelectAllResp)
	err := grpc.Invoke(ctx, "/StaffDBrpc.staff/SelectAllStaff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) SelectByStaffID(ctx context.Context, in *SelectByIDReq, opts ...grpc.CallOption) (*SelectByIDResp, error) {
	out := new(SelectByIDResp)
	err := grpc.Invoke(ctx, "/StaffDBrpc.staff/SelectByStaffID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Staff service

type StaffServer interface {
	AddStaff(context.Context, *AddReq) (*AddResp, error)
	UpdateStaff(context.Context, *UpdateReq) (*UpdateResp, error)
	DelStaff(context.Context, *DelReq) (*DelResp, error)
	IfStaffExist(context.Context, *IfExistReq) (*IfExistResp, error)
	SelectAllStaff(context.Context, *SelectAllReq) (*SelectAllResp, error)
	SelectByStaffID(context.Context, *SelectByIDReq) (*SelectByIDResp, error)
}

func RegisterStaffServer(s *grpc.Server, srv StaffServer) {
	s.RegisterService(&_Staff_serviceDesc, srv)
}

func _Staff_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StaffDBrpc.staff/AddStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).AddStaff(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StaffDBrpc.staff/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).UpdateStaff(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_DelStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).DelStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StaffDBrpc.staff/DelStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).DelStaff(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_IfStaffExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IfExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).IfStaffExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StaffDBrpc.staff/IfStaffExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).IfStaffExist(ctx, req.(*IfExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_SelectAllStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).SelectAllStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StaffDBrpc.staff/SelectAllStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).SelectAllStaff(ctx, req.(*SelectAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_SelectByStaffID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).SelectByStaffID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StaffDBrpc.staff/SelectByStaffID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).SelectByStaffID(ctx, req.(*SelectByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Staff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StaffDBrpc.staff",
	HandlerType: (*StaffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStaff",
			Handler:    _Staff_AddStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _Staff_UpdateStaff_Handler,
		},
		{
			MethodName: "DelStaff",
			Handler:    _Staff_DelStaff_Handler,
		},
		{
			MethodName: "IfStaffExist",
			Handler:    _Staff_IfStaffExist_Handler,
		},
		{
			MethodName: "SelectAllStaff",
			Handler:    _Staff_SelectAllStaff_Handler,
		},
		{
			MethodName: "SelectByStaffID",
			Handler:    _Staff_SelectByStaffID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff.proto",
}

func init() { proto.RegisterFile("staff.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x0d, 0x85, 0xaf, 0xc0, 0xc0, 0xc7, 0x97, 0xcc, 0x17, 0xb1, 0x36, 0x1a, 0x49, 0x4d, 0x0c,
	0x7a, 0xe0, 0x20, 0x57, 0x13, 0x53, 0x52, 0x12, 0x7b, 0x2d, 0xf1, 0x6e, 0xed, 0x6e, 0x93, 0x86,
	0x4a, 0x57, 0xa6, 0x46, 0x39, 0xfa, 0xcf, 0x4d, 0x77, 0x5b, 0x28, 0x71, 0xe1, 0xe6, 0x8d, 0x37,
	0xf3, 0xf6, 0xbd, 0x61, 0xde, 0x14, 0x7a, 0x94, 0x87, 0x71, 0x3c, 0x11, 0xeb, 0x2c, 0xcf, 0x10,
	0x16, 0x05, 0xf0, 0x66, 0x6b, 0x11, 0x39, 0xcf, 0x60, 0xba, 0x8c, 0x05, 0xfc, 0x0d, 0x07, 0x60,
	0x24, 0xcc, 0x6a, 0x8c, 0x1a, 0xe3, 0x66, 0x60, 0x24, 0x0c, 0x11, 0x5a, 0xab, 0xf0, 0x95, 0x5b,
	0xc6, 0xa8, 0x31, 0xee, 0x06, 0xf2, 0x37, 0x0e, 0xc1, 0x14, 0x21, 0xd1, 0x07, 0xb3, 0x9a, 0xb2,
	0x5a, 0x22, 0xb4, 0xa1, 0x23, 0x32, 0x4a, 0xf2, 0x24, 0x5b, 0x59, 0x2d, 0xa9, 0xb0, 0xc5, 0xce,
	0x15, 0xb4, 0xa5, 0x03, 0x09, 0xb4, 0xa0, 0xbd, 0x78, 0x8f, 0x22, 0x4e, 0x24, 0x7d, 0x3a, 0x41,
	0x9b, 0x14, 0x74, 0x22, 0xe8, 0x3e, 0x09, 0x16, 0xe6, 0xfc, 0x37, 0x27, 0xb9, 0x06, 0xa8, 0x4c,
	0x8e, 0x0e, 0x63, 0x81, 0xe9, 0xf1, 0x54, 0x33, 0x49, 0xf1, 0x5f, 0x64, 0xe7, 0xe8, 0xf3, 0x73,
	0x00, 0x3f, 0x9e, 0x7f, 0x26, 0x94, 0xeb, 0x24, 0x2e, 0xa0, 0xb7, 0xed, 0x92, 0x28, 0xda, 0xd9,
	0xb2, 0x54, 0x30, 0xb2, 0xa5, 0x33, 0x80, 0xfe, 0x82, 0xa7, 0x3c, 0xca, 0xdd, 0xb4, 0x98, 0xc0,
	0xb9, 0x81, 0xbf, 0x35, 0xac, 0x7c, 0x45, 0xb8, 0x49, 0xb3, 0x50, 0x89, 0xf6, 0x83, 0x0a, 0x3a,
	0x97, 0x15, 0x75, 0xb6, 0xf1, 0x3d, 0x9d, 0xf5, 0x2d, 0x0c, 0xea, 0x84, 0x63, 0x62, 0x77, 0x5f,
	0x4d, 0xf8, 0x23, 0x6f, 0x06, 0xa7, 0xd0, 0x71, 0x19, 0x93, 0x27, 0x83, 0x38, 0xd9, 0x9d, 0xce,
	0x44, 0xdd, 0x8d, 0xfd, 0xff, 0x47, 0x8d, 0x04, 0xde, 0x43, 0x4f, 0xad, 0x5a, 0xbd, 0x3b, 0xa9,
	0x73, 0xb6, 0x41, 0xdb, 0x43, 0x5d, 0x99, 0x44, 0x61, 0xe9, 0xf1, 0x54, 0x63, 0xa9, 0x62, 0xd9,
	0xb7, 0xac, 0x02, 0x79, 0x80, 0xbe, 0x1f, 0xcb, 0xba, 0xdc, 0x2e, 0xee, 0x89, 0xef, 0x02, 0xb1,
	0x4f, 0xb5, 0x75, 0x12, 0x38, 0xaf, 0xd6, 0xe3, 0xa6, 0xa5, 0xb7, 0x55, 0xa7, 0xd6, 0x63, 0xb1,
	0xcf, 0x0e, 0x74, 0x48, 0xe0, 0x23, 0xfc, 0xab, 0xb6, 0x2c, 0x39, 0xbe, 0x87, 0x1a, 0x76, 0x99,
	0x91, 0x6d, 0x1f, 0x6a, 0x91, 0x78, 0x31, 0xe5, 0xe7, 0x3a, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0xe7, 0xd0, 0xb2, 0xd6, 0xbd, 0x03, 0x00, 0x00,
}
