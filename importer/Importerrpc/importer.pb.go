// Code generated by protoc-gen-go. DO NOT EDIT.
// source: importer.proto

/*
Package Importerrpc is a generated protocol buffer package.

It is generated from these files:
	importer.proto

It has these top-level messages:
	AddDIReq
	AddDIResp
	DelDIReq
	DelDIResp
	UpdateDIReq
	UpdateDIResp
	SelectAllDIReq
	SelectAllDIResp
	SelectByIDDIReq
	SelectByIDDIResp
	SelectByCreatedAtDIReq
	SelectByCreatedAtDIResp
*/
package Importerrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddDIReq struct {
	CreatedBy      string `protobuf:"bytes,1,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	GoodList       []byte `protobuf:"bytes,2,opt,name=good_list,json=goodList,proto3" json:"good_list,omitempty"`
	GoodListAmount []byte `protobuf:"bytes,3,opt,name=good_list_amount,json=goodListAmount,proto3" json:"good_list_amount,omitempty"`
	TotalMoney     int64  `protobuf:"varint,4,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *AddDIReq) Reset()                    { *m = AddDIReq{} }
func (m *AddDIReq) String() string            { return proto.CompactTextString(m) }
func (*AddDIReq) ProtoMessage()               {}
func (*AddDIReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDIReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *AddDIReq) GetGoodList() []byte {
	if m != nil {
		return m.GoodList
	}
	return nil
}

func (m *AddDIReq) GetGoodListAmount() []byte {
	if m != nil {
		return m.GoodListAmount
	}
	return nil
}

func (m *AddDIReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type AddDIResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddDIResp) Reset()                    { *m = AddDIResp{} }
func (m *AddDIResp) String() string            { return proto.CompactTextString(m) }
func (*AddDIResp) ProtoMessage()               {}
func (*AddDIResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddDIResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelDIReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelDIReq) Reset()                    { *m = DelDIReq{} }
func (m *DelDIReq) String() string            { return proto.CompactTextString(m) }
func (*DelDIReq) ProtoMessage()               {}
func (*DelDIReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelDIReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelDIResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelDIResp) Reset()                    { *m = DelDIResp{} }
func (m *DelDIResp) String() string            { return proto.CompactTextString(m) }
func (*DelDIResp) ProtoMessage()               {}
func (*DelDIResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelDIResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateDIReq struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreatedBy      string `protobuf:"bytes,2,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	GoodList       []byte `protobuf:"bytes,3,opt,name=good_list,json=goodList,proto3" json:"good_list,omitempty"`
	GoodListAmount []byte `protobuf:"bytes,4,opt,name=good_list_amount,json=goodListAmount,proto3" json:"good_list_amount,omitempty"`
	TotalMoney     int64  `protobuf:"varint,5,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *UpdateDIReq) Reset()                    { *m = UpdateDIReq{} }
func (m *UpdateDIReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateDIReq) ProtoMessage()               {}
func (*UpdateDIReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateDIReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateDIReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *UpdateDIReq) GetGoodList() []byte {
	if m != nil {
		return m.GoodList
	}
	return nil
}

func (m *UpdateDIReq) GetGoodListAmount() []byte {
	if m != nil {
		return m.GoodListAmount
	}
	return nil
}

func (m *UpdateDIReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type UpdateDIResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateDIResp) Reset()                    { *m = UpdateDIResp{} }
func (m *UpdateDIResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateDIResp) ProtoMessage()               {}
func (*UpdateDIResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateDIResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllDIReq struct {
}

func (m *SelectAllDIReq) Reset()                    { *m = SelectAllDIReq{} }
func (m *SelectAllDIReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDIReq) ProtoMessage()               {}
func (*SelectAllDIReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SelectAllDIResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllDIResp) Reset()                    { *m = SelectAllDIResp{} }
func (m *SelectAllDIResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDIResp) ProtoMessage()               {}
func (*SelectAllDIResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectAllDIResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByIDDIReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectByIDDIReq) Reset()                    { *m = SelectByIDDIReq{} }
func (m *SelectByIDDIReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDIReq) ProtoMessage()               {}
func (*SelectByIDDIReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectByIDDIReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectByIDDIResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByIDDIResp) Reset()                    { *m = SelectByIDDIResp{} }
func (m *SelectByIDDIResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDIResp) ProtoMessage()               {}
func (*SelectByIDDIResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectByIDDIResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByCreatedAtDIReq struct {
	FromTime int64 `protobuf:"varint,1,opt,name=from_time,json=fromTime" json:"from_time,omitempty"`
	ToTime   int64 `protobuf:"varint,2,opt,name=to_time,json=toTime" json:"to_time,omitempty"`
}

func (m *SelectByCreatedAtDIReq) Reset()                    { *m = SelectByCreatedAtDIReq{} }
func (m *SelectByCreatedAtDIReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDIReq) ProtoMessage()               {}
func (*SelectByCreatedAtDIReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SelectByCreatedAtDIReq) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *SelectByCreatedAtDIReq) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

type SelectByCreatedAtDIResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByCreatedAtDIResp) Reset()                    { *m = SelectByCreatedAtDIResp{} }
func (m *SelectByCreatedAtDIResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDIResp) ProtoMessage()               {}
func (*SelectByCreatedAtDIResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectByCreatedAtDIResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDIReq)(nil), "Importerrpc.AddDIReq")
	proto.RegisterType((*AddDIResp)(nil), "Importerrpc.AddDIResp")
	proto.RegisterType((*DelDIReq)(nil), "Importerrpc.DelDIReq")
	proto.RegisterType((*DelDIResp)(nil), "Importerrpc.DelDIResp")
	proto.RegisterType((*UpdateDIReq)(nil), "Importerrpc.UpdateDIReq")
	proto.RegisterType((*UpdateDIResp)(nil), "Importerrpc.UpdateDIResp")
	proto.RegisterType((*SelectAllDIReq)(nil), "Importerrpc.SelectAllDIReq")
	proto.RegisterType((*SelectAllDIResp)(nil), "Importerrpc.SelectAllDIResp")
	proto.RegisterType((*SelectByIDDIReq)(nil), "Importerrpc.SelectByIDDIReq")
	proto.RegisterType((*SelectByIDDIResp)(nil), "Importerrpc.SelectByIDDIResp")
	proto.RegisterType((*SelectByCreatedAtDIReq)(nil), "Importerrpc.SelectByCreatedAtDIReq")
	proto.RegisterType((*SelectByCreatedAtDIResp)(nil), "Importerrpc.SelectByCreatedAtDIResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Importer service

type ImporterClient interface {
	AddDI(ctx context.Context, in *AddDIReq, opts ...grpc.CallOption) (*AddDIResp, error)
	DelDI(ctx context.Context, in *DelDIReq, opts ...grpc.CallOption) (*DelDIResp, error)
	UpdateDI(ctx context.Context, in *UpdateDIReq, opts ...grpc.CallOption) (*UpdateDIResp, error)
	SelectAllDI(ctx context.Context, in *SelectAllDIReq, opts ...grpc.CallOption) (*SelectAllDIResp, error)
	SelectByIDDI(ctx context.Context, in *SelectByIDDIReq, opts ...grpc.CallOption) (*SelectByIDDIResp, error)
	SelectByCreatedAtDI(ctx context.Context, in *SelectByCreatedAtDIReq, opts ...grpc.CallOption) (*SelectByCreatedAtDIResp, error)
}

type importerClient struct {
	cc *grpc.ClientConn
}

func NewImporterClient(cc *grpc.ClientConn) ImporterClient {
	return &importerClient{cc}
}

func (c *importerClient) AddDI(ctx context.Context, in *AddDIReq, opts ...grpc.CallOption) (*AddDIResp, error) {
	out := new(AddDIResp)
	err := grpc.Invoke(ctx, "/Importerrpc.importer/AddDI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) DelDI(ctx context.Context, in *DelDIReq, opts ...grpc.CallOption) (*DelDIResp, error) {
	out := new(DelDIResp)
	err := grpc.Invoke(ctx, "/Importerrpc.importer/DelDI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) UpdateDI(ctx context.Context, in *UpdateDIReq, opts ...grpc.CallOption) (*UpdateDIResp, error) {
	out := new(UpdateDIResp)
	err := grpc.Invoke(ctx, "/Importerrpc.importer/UpdateDI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) SelectAllDI(ctx context.Context, in *SelectAllDIReq, opts ...grpc.CallOption) (*SelectAllDIResp, error) {
	out := new(SelectAllDIResp)
	err := grpc.Invoke(ctx, "/Importerrpc.importer/SelectAllDI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) SelectByIDDI(ctx context.Context, in *SelectByIDDIReq, opts ...grpc.CallOption) (*SelectByIDDIResp, error) {
	out := new(SelectByIDDIResp)
	err := grpc.Invoke(ctx, "/Importerrpc.importer/SelectByIDDI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) SelectByCreatedAtDI(ctx context.Context, in *SelectByCreatedAtDIReq, opts ...grpc.CallOption) (*SelectByCreatedAtDIResp, error) {
	out := new(SelectByCreatedAtDIResp)
	err := grpc.Invoke(ctx, "/Importerrpc.importer/SelectByCreatedAtDI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Importer service

type ImporterServer interface {
	AddDI(context.Context, *AddDIReq) (*AddDIResp, error)
	DelDI(context.Context, *DelDIReq) (*DelDIResp, error)
	UpdateDI(context.Context, *UpdateDIReq) (*UpdateDIResp, error)
	SelectAllDI(context.Context, *SelectAllDIReq) (*SelectAllDIResp, error)
	SelectByIDDI(context.Context, *SelectByIDDIReq) (*SelectByIDDIResp, error)
	SelectByCreatedAtDI(context.Context, *SelectByCreatedAtDIReq) (*SelectByCreatedAtDIResp, error)
}

func RegisterImporterServer(s *grpc.Server, srv ImporterServer) {
	s.RegisterService(&_Importer_serviceDesc, srv)
}

func _Importer_AddDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).AddDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importerrpc.importer/AddDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).AddDI(ctx, req.(*AddDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_DelDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).DelDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importerrpc.importer/DelDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).DelDI(ctx, req.(*DelDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_UpdateDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).UpdateDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importerrpc.importer/UpdateDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).UpdateDI(ctx, req.(*UpdateDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_SelectAllDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).SelectAllDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importerrpc.importer/SelectAllDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).SelectAllDI(ctx, req.(*SelectAllDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_SelectByIDDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIDDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).SelectByIDDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importerrpc.importer/SelectByIDDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).SelectByIDDI(ctx, req.(*SelectByIDDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_SelectByCreatedAtDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByCreatedAtDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).SelectByCreatedAtDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importerrpc.importer/SelectByCreatedAtDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).SelectByCreatedAtDI(ctx, req.(*SelectByCreatedAtDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Importer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Importerrpc.importer",
	HandlerType: (*ImporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDI",
			Handler:    _Importer_AddDI_Handler,
		},
		{
			MethodName: "DelDI",
			Handler:    _Importer_DelDI_Handler,
		},
		{
			MethodName: "UpdateDI",
			Handler:    _Importer_UpdateDI_Handler,
		},
		{
			MethodName: "SelectAllDI",
			Handler:    _Importer_SelectAllDI_Handler,
		},
		{
			MethodName: "SelectByIDDI",
			Handler:    _Importer_SelectByIDDI_Handler,
		},
		{
			MethodName: "SelectByCreatedAtDI",
			Handler:    _Importer_SelectByCreatedAtDI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "importer.proto",
}

func init() { proto.RegisterFile("importer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6f, 0x94, 0x40,
	0x14, 0x0d, 0xd0, 0x76, 0xe1, 0x2e, 0xc1, 0xcd, 0x35, 0xb6, 0xc8, 0xda, 0xb8, 0xa2, 0x26, 0x24,
	0x9a, 0x7d, 0xb0, 0x89, 0xaf, 0x86, 0xba, 0x0f, 0x6e, 0xfc, 0x88, 0xa1, 0xfa, 0x8c, 0x14, 0x46,
	0x43, 0x02, 0x9d, 0x91, 0x99, 0x3e, 0xf0, 0x33, 0xfc, 0x0f, 0xfe, 0x04, 0x7f, 0xa0, 0x61, 0x06,
	0x5a, 0x58, 0x29, 0xee, 0xe3, 0x9c, 0x73, 0xee, 0xcd, 0xe5, 0x9c, 0x7b, 0x01, 0x27, 0x2f, 0x19,
	0xad, 0x04, 0xa9, 0xd6, 0xac, 0xa2, 0x82, 0xe2, 0x7c, 0xdb, 0xbe, 0x2b, 0x96, 0xfa, 0xbf, 0x34,
	0x30, 0xc3, 0x2c, 0xdb, 0x6c, 0x23, 0xf2, 0x13, 0x4f, 0x01, 0xd2, 0x8a, 0x24, 0x82, 0x64, 0xf1,
	0x65, 0xed, 0x6a, 0x2b, 0x2d, 0xb0, 0x22, 0xab, 0x45, 0xce, 0x6b, 0x5c, 0x82, 0xf5, 0x83, 0xd2,
	0x2c, 0x2e, 0x72, 0x2e, 0x5c, 0x7d, 0xa5, 0x05, 0x76, 0x64, 0x36, 0xc0, 0x87, 0x9c, 0x0b, 0x0c,
	0x60, 0x71, 0x43, 0xc6, 0x49, 0x49, 0xaf, 0xaf, 0x84, 0x6b, 0x48, 0x8d, 0xd3, 0x69, 0x42, 0x89,
	0xe2, 0x63, 0x98, 0x0b, 0x2a, 0x92, 0x22, 0x2e, 0xe9, 0x15, 0xa9, 0xdd, 0x83, 0x95, 0x16, 0x18,
	0x11, 0x48, 0xe8, 0x63, 0x83, 0xf8, 0xcf, 0xc1, 0x6a, 0x47, 0xe2, 0x0c, 0x5d, 0x98, 0x5d, 0x5c,
	0xa7, 0x29, 0xe1, 0x5c, 0x0e, 0x64, 0x46, 0x33, 0xae, 0x9e, 0xbe, 0x07, 0xe6, 0x86, 0x14, 0x6a,
	0x72, 0x07, 0xf4, 0x3c, 0x93, 0x02, 0x23, 0xd2, 0xf3, 0xac, 0x69, 0xd1, 0x72, 0x93, 0x2d, 0x7e,
	0x6b, 0x30, 0xff, 0xca, 0xb2, 0x44, 0x90, 0xd1, 0x36, 0x3b, 0x86, 0xe8, 0x93, 0x86, 0x18, 0x7b,
	0x18, 0x72, 0xb0, 0x8f, 0x21, 0x87, 0xff, 0x18, 0x12, 0x80, 0x7d, 0x3b, 0xe5, 0xe4, 0x07, 0x2d,
	0xc0, 0xb9, 0x20, 0x05, 0x49, 0x45, 0x58, 0x28, 0x67, 0xfc, 0x17, 0x70, 0x6f, 0x80, 0xa8, 0xf2,
	0xcf, 0x49, 0x5d, 0xd0, 0x44, 0x7d, 0xaa, 0x1d, 0xcd, 0x98, 0x7a, 0xfa, 0x4f, 0x3a, 0xf1, 0x79,
	0xbd, 0xdd, 0x8c, 0x3b, 0xfb, 0x12, 0x16, 0x43, 0xc9, 0x64, 0xc3, 0x4f, 0x70, 0xdc, 0xa9, 0xdf,
	0x2a, 0xdb, 0x42, 0xa1, 0xfa, 0x2e, 0xc1, 0xfa, 0x5e, 0xd1, 0x32, 0x16, 0x79, 0x49, 0xda, 0xf6,
	0x66, 0x03, 0x7c, 0xc9, 0x4b, 0x82, 0x27, 0x30, 0x13, 0x54, 0x51, 0xba, 0xa4, 0x8e, 0x04, 0x6d,
	0x08, 0xff, 0x0c, 0x4e, 0x46, 0xfb, 0x4d, 0x0d, 0xf1, 0xea, 0x8f, 0x01, 0x66, 0x77, 0x03, 0xf8,
	0x1a, 0x0e, 0xe5, 0x72, 0xe1, 0x83, 0x75, 0xef, 0x0e, 0xd6, 0xdd, 0x0d, 0x78, 0xc7, 0x63, 0x30,
	0x67, 0x4d, 0x9d, 0xdc, 0xa8, 0x9d, 0xba, 0x6e, 0x03, 0x77, 0xea, 0x6e, 0x97, 0xef, 0x0d, 0x98,
	0x5d, 0x76, 0xe8, 0x0e, 0x34, 0xbd, 0xc5, 0xf3, 0x1e, 0xde, 0xc1, 0x70, 0x86, 0xef, 0x60, 0xde,
	0x0b, 0x10, 0x97, 0x03, 0xe5, 0x30, 0x6c, 0xef, 0xd1, 0xdd, 0x24, 0x67, 0xf8, 0x1e, 0xec, 0x7e,
	0x74, 0x38, 0xa6, 0xbe, 0x09, 0xde, 0x3b, 0x9d, 0x60, 0x39, 0xc3, 0x6f, 0x70, 0x7f, 0x24, 0x09,
	0x7c, 0x3a, 0x5a, 0x35, 0xcc, 0xde, 0x7b, 0xf6, 0x7f, 0x11, 0x67, 0x97, 0x47, 0xf2, 0x77, 0x75,
	0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x99, 0x88, 0xda, 0x64, 0xc0, 0x04, 0x00, 0x00,
}
