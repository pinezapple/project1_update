// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cusmana.proto

/*
Package Cusmanarpc is a generated protocol buffer package.

It is generated from these files:
	cusmana.proto

It has these top-level messages:
	AddCusReq
	AddCusResp
	DelCusReq
	DelCusResp
	UpdateCusReq
	UpdateCusResp
	SelectAllCusReq
	SelectAllCusResp
	SelectCusByIdReq
	SelectCusByIdResp
	SelectCusByNameReq
	SelectCusByNameResp
	SelectCusByPhoneNumReq
	SelectCusByPhoneNumResp
*/
package Cusmanarpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddCusReq struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Phonenum string `protobuf:"bytes,2,opt,name=phonenum" json:"phonenum,omitempty"`
	Balance  int64  `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
	Level    int64  `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
}

func (m *AddCusReq) Reset()                    { *m = AddCusReq{} }
func (m *AddCusReq) String() string            { return proto.CompactTextString(m) }
func (*AddCusReq) ProtoMessage()               {}
func (*AddCusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddCusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddCusReq) GetPhonenum() string {
	if m != nil {
		return m.Phonenum
	}
	return ""
}

func (m *AddCusReq) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddCusReq) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type AddCusResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddCusResp) Reset()                    { *m = AddCusResp{} }
func (m *AddCusResp) String() string            { return proto.CompactTextString(m) }
func (*AddCusResp) ProtoMessage()               {}
func (*AddCusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddCusResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelCusReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelCusReq) Reset()                    { *m = DelCusReq{} }
func (m *DelCusReq) String() string            { return proto.CompactTextString(m) }
func (*DelCusReq) ProtoMessage()               {}
func (*DelCusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelCusReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelCusResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelCusResp) Reset()                    { *m = DelCusResp{} }
func (m *DelCusResp) String() string            { return proto.CompactTextString(m) }
func (*DelCusResp) ProtoMessage()               {}
func (*DelCusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelCusResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateCusReq struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phonenum string `protobuf:"bytes,3,opt,name=phonenum" json:"phonenum,omitempty"`
	Balance  int64  `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
	Level    int64  `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
}

func (m *UpdateCusReq) Reset()                    { *m = UpdateCusReq{} }
func (m *UpdateCusReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCusReq) ProtoMessage()               {}
func (*UpdateCusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateCusReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCusReq) GetPhonenum() string {
	if m != nil {
		return m.Phonenum
	}
	return ""
}

func (m *UpdateCusReq) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *UpdateCusReq) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type UpdateCusResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateCusResp) Reset()                    { *m = UpdateCusResp{} }
func (m *UpdateCusResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateCusResp) ProtoMessage()               {}
func (*UpdateCusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateCusResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllCusReq struct {
}

func (m *SelectAllCusReq) Reset()                    { *m = SelectAllCusReq{} }
func (m *SelectAllCusReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllCusReq) ProtoMessage()               {}
func (*SelectAllCusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SelectAllCusResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllCusResp) Reset()                    { *m = SelectAllCusResp{} }
func (m *SelectAllCusResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllCusResp) ProtoMessage()               {}
func (*SelectAllCusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectAllCusResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectCusByIdReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectCusByIdReq) Reset()                    { *m = SelectCusByIdReq{} }
func (m *SelectCusByIdReq) String() string            { return proto.CompactTextString(m) }
func (*SelectCusByIdReq) ProtoMessage()               {}
func (*SelectCusByIdReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectCusByIdReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectCusByIdResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectCusByIdResp) Reset()                    { *m = SelectCusByIdResp{} }
func (m *SelectCusByIdResp) String() string            { return proto.CompactTextString(m) }
func (*SelectCusByIdResp) ProtoMessage()               {}
func (*SelectCusByIdResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectCusByIdResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectCusByNameReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SelectCusByNameReq) Reset()                    { *m = SelectCusByNameReq{} }
func (m *SelectCusByNameReq) String() string            { return proto.CompactTextString(m) }
func (*SelectCusByNameReq) ProtoMessage()               {}
func (*SelectCusByNameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SelectCusByNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SelectCusByNameResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectCusByNameResp) Reset()                    { *m = SelectCusByNameResp{} }
func (m *SelectCusByNameResp) String() string            { return proto.CompactTextString(m) }
func (*SelectCusByNameResp) ProtoMessage()               {}
func (*SelectCusByNameResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectCusByNameResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectCusByPhoneNumReq struct {
	Phonenum string `protobuf:"bytes,1,opt,name=phonenum" json:"phonenum,omitempty"`
}

func (m *SelectCusByPhoneNumReq) Reset()                    { *m = SelectCusByPhoneNumReq{} }
func (m *SelectCusByPhoneNumReq) String() string            { return proto.CompactTextString(m) }
func (*SelectCusByPhoneNumReq) ProtoMessage()               {}
func (*SelectCusByPhoneNumReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SelectCusByPhoneNumReq) GetPhonenum() string {
	if m != nil {
		return m.Phonenum
	}
	return ""
}

type SelectCusByPhoneNumResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectCusByPhoneNumResp) Reset()                    { *m = SelectCusByPhoneNumResp{} }
func (m *SelectCusByPhoneNumResp) String() string            { return proto.CompactTextString(m) }
func (*SelectCusByPhoneNumResp) ProtoMessage()               {}
func (*SelectCusByPhoneNumResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SelectCusByPhoneNumResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddCusReq)(nil), "Cusmanarpc.AddCusReq")
	proto.RegisterType((*AddCusResp)(nil), "Cusmanarpc.AddCusResp")
	proto.RegisterType((*DelCusReq)(nil), "Cusmanarpc.DelCusReq")
	proto.RegisterType((*DelCusResp)(nil), "Cusmanarpc.DelCusResp")
	proto.RegisterType((*UpdateCusReq)(nil), "Cusmanarpc.UpdateCusReq")
	proto.RegisterType((*UpdateCusResp)(nil), "Cusmanarpc.UpdateCusResp")
	proto.RegisterType((*SelectAllCusReq)(nil), "Cusmanarpc.SelectAllCusReq")
	proto.RegisterType((*SelectAllCusResp)(nil), "Cusmanarpc.SelectAllCusResp")
	proto.RegisterType((*SelectCusByIdReq)(nil), "Cusmanarpc.SelectCusByIdReq")
	proto.RegisterType((*SelectCusByIdResp)(nil), "Cusmanarpc.SelectCusByIdResp")
	proto.RegisterType((*SelectCusByNameReq)(nil), "Cusmanarpc.SelectCusByNameReq")
	proto.RegisterType((*SelectCusByNameResp)(nil), "Cusmanarpc.SelectCusByNameResp")
	proto.RegisterType((*SelectCusByPhoneNumReq)(nil), "Cusmanarpc.SelectCusByPhoneNumReq")
	proto.RegisterType((*SelectCusByPhoneNumResp)(nil), "Cusmanarpc.SelectCusByPhoneNumResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cusmana service

type CusmanaClient interface {
	AddCus(ctx context.Context, in *AddCusReq, opts ...grpc.CallOption) (*AddCusResp, error)
	DelCus(ctx context.Context, in *DelCusReq, opts ...grpc.CallOption) (*DelCusResp, error)
	UpdateCus(ctx context.Context, in *UpdateCusReq, opts ...grpc.CallOption) (*UpdateCusResp, error)
	SelectAllCus(ctx context.Context, in *SelectAllCusReq, opts ...grpc.CallOption) (*SelectAllCusResp, error)
	SelectCusById(ctx context.Context, in *SelectCusByIdReq, opts ...grpc.CallOption) (*SelectCusByIdResp, error)
	SelectCusByName(ctx context.Context, in *SelectCusByNameReq, opts ...grpc.CallOption) (*SelectCusByNameResp, error)
	SelectCusByPhoneNum(ctx context.Context, in *SelectCusByPhoneNumReq, opts ...grpc.CallOption) (*SelectCusByPhoneNumResp, error)
}

type cusmanaClient struct {
	cc *grpc.ClientConn
}

func NewCusmanaClient(cc *grpc.ClientConn) CusmanaClient {
	return &cusmanaClient{cc}
}

func (c *cusmanaClient) AddCus(ctx context.Context, in *AddCusReq, opts ...grpc.CallOption) (*AddCusResp, error) {
	out := new(AddCusResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/AddCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cusmanaClient) DelCus(ctx context.Context, in *DelCusReq, opts ...grpc.CallOption) (*DelCusResp, error) {
	out := new(DelCusResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/DelCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cusmanaClient) UpdateCus(ctx context.Context, in *UpdateCusReq, opts ...grpc.CallOption) (*UpdateCusResp, error) {
	out := new(UpdateCusResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/UpdateCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cusmanaClient) SelectAllCus(ctx context.Context, in *SelectAllCusReq, opts ...grpc.CallOption) (*SelectAllCusResp, error) {
	out := new(SelectAllCusResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/SelectAllCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cusmanaClient) SelectCusById(ctx context.Context, in *SelectCusByIdReq, opts ...grpc.CallOption) (*SelectCusByIdResp, error) {
	out := new(SelectCusByIdResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/SelectCusById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cusmanaClient) SelectCusByName(ctx context.Context, in *SelectCusByNameReq, opts ...grpc.CallOption) (*SelectCusByNameResp, error) {
	out := new(SelectCusByNameResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/SelectCusByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cusmanaClient) SelectCusByPhoneNum(ctx context.Context, in *SelectCusByPhoneNumReq, opts ...grpc.CallOption) (*SelectCusByPhoneNumResp, error) {
	out := new(SelectCusByPhoneNumResp)
	err := grpc.Invoke(ctx, "/Cusmanarpc.cusmana/SelectCusByPhoneNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cusmana service

type CusmanaServer interface {
	AddCus(context.Context, *AddCusReq) (*AddCusResp, error)
	DelCus(context.Context, *DelCusReq) (*DelCusResp, error)
	UpdateCus(context.Context, *UpdateCusReq) (*UpdateCusResp, error)
	SelectAllCus(context.Context, *SelectAllCusReq) (*SelectAllCusResp, error)
	SelectCusById(context.Context, *SelectCusByIdReq) (*SelectCusByIdResp, error)
	SelectCusByName(context.Context, *SelectCusByNameReq) (*SelectCusByNameResp, error)
	SelectCusByPhoneNum(context.Context, *SelectCusByPhoneNumReq) (*SelectCusByPhoneNumResp, error)
}

func RegisterCusmanaServer(s *grpc.Server, srv CusmanaServer) {
	s.RegisterService(&_Cusmana_serviceDesc, srv)
}

func _Cusmana_AddCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).AddCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/AddCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).AddCus(ctx, req.(*AddCusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cusmana_DelCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).DelCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/DelCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).DelCus(ctx, req.(*DelCusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cusmana_UpdateCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).UpdateCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/UpdateCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).UpdateCus(ctx, req.(*UpdateCusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cusmana_SelectAllCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllCusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).SelectAllCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/SelectAllCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).SelectAllCus(ctx, req.(*SelectAllCusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cusmana_SelectCusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectCusByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).SelectCusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/SelectCusById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).SelectCusById(ctx, req.(*SelectCusByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cusmana_SelectCusByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectCusByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).SelectCusByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/SelectCusByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).SelectCusByName(ctx, req.(*SelectCusByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cusmana_SelectCusByPhoneNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectCusByPhoneNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CusmanaServer).SelectCusByPhoneNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cusmanarpc.cusmana/SelectCusByPhoneNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CusmanaServer).SelectCusByPhoneNum(ctx, req.(*SelectCusByPhoneNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cusmana_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Cusmanarpc.cusmana",
	HandlerType: (*CusmanaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCus",
			Handler:    _Cusmana_AddCus_Handler,
		},
		{
			MethodName: "DelCus",
			Handler:    _Cusmana_DelCus_Handler,
		},
		{
			MethodName: "UpdateCus",
			Handler:    _Cusmana_UpdateCus_Handler,
		},
		{
			MethodName: "SelectAllCus",
			Handler:    _Cusmana_SelectAllCus_Handler,
		},
		{
			MethodName: "SelectCusById",
			Handler:    _Cusmana_SelectCusById_Handler,
		},
		{
			MethodName: "SelectCusByName",
			Handler:    _Cusmana_SelectCusByName_Handler,
		},
		{
			MethodName: "SelectCusByPhoneNum",
			Handler:    _Cusmana_SelectCusByPhoneNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cusmana.proto",
}

func init() { proto.RegisterFile("cusmana.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x5b, 0xab, 0xd3, 0x40,
	0x10, 0xc7, 0xc9, 0xe5, 0x9c, 0x9c, 0x0c, 0xad, 0x7a, 0x46, 0xad, 0x31, 0xf5, 0x52, 0x56, 0x90,
	0x0a, 0x5a, 0xc1, 0x0a, 0xbe, 0x5a, 0xeb, 0x4b, 0x41, 0x4a, 0x49, 0xf1, 0x55, 0xd8, 0x26, 0x0b,
	0x16, 0x73, 0x59, 0xbb, 0x8d, 0xd0, 0x17, 0x3f, 0x80, 0x9f, 0x5a, 0x92, 0x4d, 0xd2, 0x4d, 0xcd,
	0xc6, 0xb7, 0xce, 0xce, 0xff, 0x3f, 0xb3, 0x33, 0xfb, 0x6b, 0x60, 0x18, 0xe6, 0x22, 0xa1, 0x29,
	0x9d, 0xf1, 0x43, 0x76, 0xcc, 0x10, 0x96, 0x32, 0x3c, 0xf0, 0x90, 0xfc, 0x00, 0x77, 0x11, 0x45,
	0xcb, 0x5c, 0x04, 0xec, 0x27, 0x22, 0xd8, 0x29, 0x4d, 0x98, 0x67, 0x4c, 0x8c, 0xa9, 0x1b, 0x94,
	0xbf, 0xd1, 0x87, 0x1b, 0xfe, 0x3d, 0x4b, 0x59, 0x9a, 0x27, 0x9e, 0x59, 0x9e, 0x37, 0x31, 0x7a,
	0xe0, 0xec, 0x68, 0x4c, 0xd3, 0x90, 0x79, 0xd6, 0xc4, 0x98, 0x5a, 0x41, 0x1d, 0xe2, 0x03, 0xb8,
	0x8a, 0xd9, 0x2f, 0x16, 0x7b, 0x76, 0x79, 0x2e, 0x03, 0xf2, 0x12, 0xa0, 0x6e, 0x26, 0x78, 0xe1,
	0xde, 0xe6, 0x61, 0xc8, 0x84, 0x28, 0x1b, 0xde, 0x04, 0x8e, 0x90, 0x21, 0x19, 0x83, 0xfb, 0x99,
	0xc5, 0xd5, 0xa5, 0xee, 0x80, 0xb9, 0x8f, 0x4a, 0x85, 0x15, 0x98, 0xfb, 0xa8, 0x28, 0x52, 0x27,
	0x7b, 0x8b, 0xfc, 0x86, 0xc1, 0x57, 0x1e, 0xd1, 0x23, 0xeb, 0xae, 0xd3, 0x0c, 0x6b, 0x6a, 0x86,
	0xb5, 0xf4, 0xc3, 0xda, 0x9a, 0x61, 0xaf, 0xd4, 0x61, 0x5f, 0xc1, 0x50, 0xe9, 0xdf, 0x7b, 0xd5,
	0x5b, 0xb8, 0xbb, 0x65, 0x31, 0x0b, 0x8f, 0x8b, 0xb8, 0x9a, 0x9a, 0xbc, 0x86, 0x7b, 0xed, 0x23,
	0x59, 0x60, 0x43, 0x4f, 0x71, 0x46, 0xe5, 0x18, 0x83, 0xc0, 0xe1, 0x32, 0x24, 0xa4, 0x56, 0x2f,
	0x73, 0xf1, 0xe9, 0xb4, 0x8a, 0xba, 0xf6, 0xf6, 0x06, 0x6e, 0x2f, 0x34, 0xbd, 0x25, 0xa7, 0x80,
	0x8a, 0x7c, 0x4d, 0x13, 0xa6, 0x21, 0x84, 0xbc, 0x85, 0xfb, 0xff, 0x28, 0x7b, 0x4b, 0xbf, 0x87,
	0x91, 0x62, 0xd8, 0x14, 0x0b, 0x5e, 0xe7, 0x49, 0x51, 0x5e, 0xdd, 0xbf, 0xd1, 0xde, 0x3f, 0x99,
	0xc3, 0xa3, 0x4e, 0x57, 0x5f, 0xab, 0x77, 0x7f, 0x6c, 0x70, 0x2a, 0xf8, 0xf1, 0x03, 0x5c, 0x4b,
	0xfa, 0xf0, 0xe1, 0xec, 0xfc, 0x0f, 0x98, 0x35, 0xf8, 0xfb, 0xa3, 0xae, 0x63, 0xc1, 0x0b, 0xa3,
	0x24, 0xae, 0x6d, 0x6c, 0x10, 0x6d, 0x1b, 0x15, 0x38, 0x3f, 0x82, 0xdb, 0x20, 0x80, 0x9e, 0x2a,
	0x52, 0xc9, 0xf4, 0x1f, 0x6b, 0x32, 0x82, 0xe3, 0x0a, 0x06, 0x2a, 0x06, 0x38, 0x56, 0xa5, 0x17,
	0xcc, 0xf8, 0x4f, 0xf4, 0x49, 0xc1, 0xf1, 0x0b, 0x0c, 0x5b, 0xef, 0x8f, 0x1d, 0xf2, 0x33, 0x3e,
	0xfe, 0xd3, 0x9e, 0xac, 0xe0, 0x18, 0xd4, 0xc8, 0x36, 0x8f, 0x8e, 0xcf, 0x34, 0x8e, 0x8a, 0x1d,
	0xff, 0x79, 0x6f, 0x5e, 0x70, 0xfc, 0xd6, 0x02, 0xa9, 0x7e, 0x61, 0x24, 0x1a, 0x9f, 0x02, 0x8e,
	0xff, 0xe2, 0xbf, 0x1a, 0xc1, 0x77, 0xd7, 0xe5, 0xe7, 0x6f, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x6b, 0xbc, 0x88, 0x0f, 0x05, 0x00, 0x00,
}
