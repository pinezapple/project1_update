// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goodreport.proto

/*
Package Goodreportrpc is a generated protocol buffer package.

It is generated from these files:
	goodreport.proto

It has these top-level messages:
	IfGoodExistReq
	IfGoodExistResp
	SelectAllGoodReq
	SelectAllGoodResp
	SelectGoodByIdReq
	SelectGoodByIdResp
	SelectGoodByNameReq
	SelectGoodByNameResp
	SelectGoodByPriceReq
	SelectGoodByPriceResp
*/
package Goodreportrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IfGoodExistReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IfGoodExistReq) Reset()                    { *m = IfGoodExistReq{} }
func (m *IfGoodExistReq) String() string            { return proto.CompactTextString(m) }
func (*IfGoodExistReq) ProtoMessage()               {}
func (*IfGoodExistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IfGoodExistReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IfGoodExistResp struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *IfGoodExistResp) Reset()                    { *m = IfGoodExistResp{} }
func (m *IfGoodExistResp) String() string            { return proto.CompactTextString(m) }
func (*IfGoodExistResp) ProtoMessage()               {}
func (*IfGoodExistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IfGoodExistResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SelectAllGoodReq struct {
}

func (m *SelectAllGoodReq) Reset()                    { *m = SelectAllGoodReq{} }
func (m *SelectAllGoodReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllGoodReq) ProtoMessage()               {}
func (*SelectAllGoodReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SelectAllGoodResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllGoodResp) Reset()                    { *m = SelectAllGoodResp{} }
func (m *SelectAllGoodResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllGoodResp) ProtoMessage()               {}
func (*SelectAllGoodResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SelectAllGoodResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectGoodByIdReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectGoodByIdReq) Reset()                    { *m = SelectGoodByIdReq{} }
func (m *SelectGoodByIdReq) String() string            { return proto.CompactTextString(m) }
func (*SelectGoodByIdReq) ProtoMessage()               {}
func (*SelectGoodByIdReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SelectGoodByIdReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectGoodByIdResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectGoodByIdResp) Reset()                    { *m = SelectGoodByIdResp{} }
func (m *SelectGoodByIdResp) String() string            { return proto.CompactTextString(m) }
func (*SelectGoodByIdResp) ProtoMessage()               {}
func (*SelectGoodByIdResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SelectGoodByIdResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectGoodByNameReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SelectGoodByNameReq) Reset()                    { *m = SelectGoodByNameReq{} }
func (m *SelectGoodByNameReq) String() string            { return proto.CompactTextString(m) }
func (*SelectGoodByNameReq) ProtoMessage()               {}
func (*SelectGoodByNameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SelectGoodByNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SelectGoodByNameResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectGoodByNameResp) Reset()                    { *m = SelectGoodByNameResp{} }
func (m *SelectGoodByNameResp) String() string            { return proto.CompactTextString(m) }
func (*SelectGoodByNameResp) ProtoMessage()               {}
func (*SelectGoodByNameResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectGoodByNameResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectGoodByPriceReq struct {
	Price int64 `protobuf:"varint,1,opt,name=price" json:"price,omitempty"`
}

func (m *SelectGoodByPriceReq) Reset()                    { *m = SelectGoodByPriceReq{} }
func (m *SelectGoodByPriceReq) String() string            { return proto.CompactTextString(m) }
func (*SelectGoodByPriceReq) ProtoMessage()               {}
func (*SelectGoodByPriceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectGoodByPriceReq) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type SelectGoodByPriceResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectGoodByPriceResp) Reset()                    { *m = SelectGoodByPriceResp{} }
func (m *SelectGoodByPriceResp) String() string            { return proto.CompactTextString(m) }
func (*SelectGoodByPriceResp) ProtoMessage()               {}
func (*SelectGoodByPriceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectGoodByPriceResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*IfGoodExistReq)(nil), "Goodreportrpc.IfGoodExistReq")
	proto.RegisterType((*IfGoodExistResp)(nil), "Goodreportrpc.IfGoodExistResp")
	proto.RegisterType((*SelectAllGoodReq)(nil), "Goodreportrpc.SelectAllGoodReq")
	proto.RegisterType((*SelectAllGoodResp)(nil), "Goodreportrpc.SelectAllGoodResp")
	proto.RegisterType((*SelectGoodByIdReq)(nil), "Goodreportrpc.SelectGoodByIdReq")
	proto.RegisterType((*SelectGoodByIdResp)(nil), "Goodreportrpc.SelectGoodByIdResp")
	proto.RegisterType((*SelectGoodByNameReq)(nil), "Goodreportrpc.SelectGoodByNameReq")
	proto.RegisterType((*SelectGoodByNameResp)(nil), "Goodreportrpc.SelectGoodByNameResp")
	proto.RegisterType((*SelectGoodByPriceReq)(nil), "Goodreportrpc.SelectGoodByPriceReq")
	proto.RegisterType((*SelectGoodByPriceResp)(nil), "Goodreportrpc.SelectGoodByPriceResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Goodreport service

type GoodreportClient interface {
	IfGoodExist(ctx context.Context, in *IfGoodExistReq, opts ...grpc.CallOption) (*IfGoodExistResp, error)
	SelectAllGood(ctx context.Context, in *SelectAllGoodReq, opts ...grpc.CallOption) (*SelectAllGoodResp, error)
	SelectGoodById(ctx context.Context, in *SelectGoodByIdReq, opts ...grpc.CallOption) (*SelectGoodByIdResp, error)
	SelectGoodByName(ctx context.Context, in *SelectGoodByNameReq, opts ...grpc.CallOption) (*SelectGoodByNameResp, error)
	SelectGoodByPrice(ctx context.Context, in *SelectGoodByPriceReq, opts ...grpc.CallOption) (*SelectGoodByPriceResp, error)
}

type goodreportClient struct {
	cc *grpc.ClientConn
}

func NewGoodreportClient(cc *grpc.ClientConn) GoodreportClient {
	return &goodreportClient{cc}
}

func (c *goodreportClient) IfGoodExist(ctx context.Context, in *IfGoodExistReq, opts ...grpc.CallOption) (*IfGoodExistResp, error) {
	out := new(IfGoodExistResp)
	err := grpc.Invoke(ctx, "/Goodreportrpc.goodreport/IfGoodExist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodreportClient) SelectAllGood(ctx context.Context, in *SelectAllGoodReq, opts ...grpc.CallOption) (*SelectAllGoodResp, error) {
	out := new(SelectAllGoodResp)
	err := grpc.Invoke(ctx, "/Goodreportrpc.goodreport/SelectAllGood", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodreportClient) SelectGoodById(ctx context.Context, in *SelectGoodByIdReq, opts ...grpc.CallOption) (*SelectGoodByIdResp, error) {
	out := new(SelectGoodByIdResp)
	err := grpc.Invoke(ctx, "/Goodreportrpc.goodreport/SelectGoodById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodreportClient) SelectGoodByName(ctx context.Context, in *SelectGoodByNameReq, opts ...grpc.CallOption) (*SelectGoodByNameResp, error) {
	out := new(SelectGoodByNameResp)
	err := grpc.Invoke(ctx, "/Goodreportrpc.goodreport/SelectGoodByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodreportClient) SelectGoodByPrice(ctx context.Context, in *SelectGoodByPriceReq, opts ...grpc.CallOption) (*SelectGoodByPriceResp, error) {
	out := new(SelectGoodByPriceResp)
	err := grpc.Invoke(ctx, "/Goodreportrpc.goodreport/SelectGoodByPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Goodreport service

type GoodreportServer interface {
	IfGoodExist(context.Context, *IfGoodExistReq) (*IfGoodExistResp, error)
	SelectAllGood(context.Context, *SelectAllGoodReq) (*SelectAllGoodResp, error)
	SelectGoodById(context.Context, *SelectGoodByIdReq) (*SelectGoodByIdResp, error)
	SelectGoodByName(context.Context, *SelectGoodByNameReq) (*SelectGoodByNameResp, error)
	SelectGoodByPrice(context.Context, *SelectGoodByPriceReq) (*SelectGoodByPriceResp, error)
}

func RegisterGoodreportServer(s *grpc.Server, srv GoodreportServer) {
	s.RegisterService(&_Goodreport_serviceDesc, srv)
}

func _Goodreport_IfGoodExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IfGoodExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodreportServer).IfGoodExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goodreportrpc.goodreport/IfGoodExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodreportServer).IfGoodExist(ctx, req.(*IfGoodExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodreport_SelectAllGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllGoodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodreportServer).SelectAllGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goodreportrpc.goodreport/SelectAllGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodreportServer).SelectAllGood(ctx, req.(*SelectAllGoodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodreport_SelectGoodById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGoodByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodreportServer).SelectGoodById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goodreportrpc.goodreport/SelectGoodById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodreportServer).SelectGoodById(ctx, req.(*SelectGoodByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodreport_SelectGoodByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGoodByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodreportServer).SelectGoodByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goodreportrpc.goodreport/SelectGoodByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodreportServer).SelectGoodByName(ctx, req.(*SelectGoodByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodreport_SelectGoodByPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGoodByPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodreportServer).SelectGoodByPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goodreportrpc.goodreport/SelectGoodByPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodreportServer).SelectGoodByPrice(ctx, req.(*SelectGoodByPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Goodreport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Goodreportrpc.goodreport",
	HandlerType: (*GoodreportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IfGoodExist",
			Handler:    _Goodreport_IfGoodExist_Handler,
		},
		{
			MethodName: "SelectAllGood",
			Handler:    _Goodreport_SelectAllGood_Handler,
		},
		{
			MethodName: "SelectGoodById",
			Handler:    _Goodreport_SelectGoodById_Handler,
		},
		{
			MethodName: "SelectGoodByName",
			Handler:    _Goodreport_SelectGoodByName_Handler,
		},
		{
			MethodName: "SelectGoodByPrice",
			Handler:    _Goodreport_SelectGoodByPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goodreport.proto",
}

func init() { proto.RegisterFile("goodreport.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xd9, 0xa6, 0x4e, 0x8f, 0x6e, 0xce, 0xe3, 0x84, 0x51, 0x50, 0xb7, 0xcc, 0x0b, 0x05,
	0x2d, 0xfe, 0x79, 0x02, 0x05, 0x91, 0x81, 0xc8, 0x88, 0x78, 0x25, 0x08, 0x75, 0x8d, 0x52, 0xd6,
	0x99, 0xb3, 0xa6, 0x17, 0xee, 0xf5, 0x7c, 0x32, 0x49, 0xb6, 0xb9, 0xa6, 0x96, 0xf4, 0x2e, 0x39,
	0xfd, 0x7d, 0x5f, 0x02, 0xbf, 0x14, 0x5a, 0x9f, 0x52, 0x86, 0x89, 0x20, 0x99, 0xa4, 0x3e, 0x25,
	0x32, 0x95, 0xd8, 0x78, 0xf8, 0x9b, 0x24, 0x34, 0x62, 0x5d, 0x68, 0x0e, 0x3e, 0xf4, 0xe8, 0xfe,
	0x3b, 0x52, 0x29, 0x17, 0x53, 0x6c, 0x42, 0x35, 0x0a, 0x3b, 0x95, 0x6e, 0xe5, 0xb4, 0xc6, 0xab,
	0x51, 0xc8, 0x7a, 0xb0, 0x6b, 0x11, 0x8a, 0x34, 0x22, 0xc7, 0x06, 0xd9, 0xe4, 0x55, 0x39, 0x66,
	0x08, 0xad, 0x67, 0x11, 0x8b, 0x51, 0x7a, 0x1b, 0xc7, 0x9a, 0xe4, 0x62, 0xca, 0x2e, 0x60, 0x2f,
	0x37, 0x53, 0x84, 0x1d, 0xa8, 0x0f, 0x83, 0x59, 0x2c, 0x83, 0xf9, 0x01, 0x3b, 0xbc, 0x4e, 0xf3,
	0x2d, 0xeb, 0x2f, 0x71, 0xcd, 0xde, 0xcd, 0x06, 0x61, 0xd1, 0x55, 0x7c, 0xc0, 0x3c, 0xe4, 0x2c,
	0x3d, 0x83, 0xfd, 0x2c, 0xff, 0x14, 0x4c, 0x84, 0xae, 0x45, 0x58, 0xfb, 0x0a, 0x26, 0xc2, 0xd0,
	0x5b, 0xdc, 0xac, 0xd9, 0x25, 0xb4, 0xff, 0xa3, 0xce, 0xf2, 0x73, 0x3b, 0x31, 0x4c, 0xa2, 0x91,
	0x69, 0x6f, 0xc3, 0x3a, 0xe9, 0xf5, 0xe2, 0xde, 0xf3, 0x0d, 0xbb, 0x82, 0x83, 0x02, 0xda, 0x75,
	0xc0, 0xf5, 0x4f, 0x0d, 0x60, 0xa5, 0x0f, 0x1f, 0x61, 0x3b, 0xe3, 0x01, 0x0f, 0x7d, 0x4b, 0xa4,
	0x6f, 0x5b, 0xf4, 0x8e, 0x5c, 0x9f, 0x15, 0x21, 0x87, 0x86, 0xa5, 0x07, 0x8f, 0x73, 0x81, 0xbc,
	0x50, 0xaf, 0xeb, 0x06, 0x14, 0xe1, 0x0b, 0x34, 0x6d, 0x3d, 0x58, 0x9c, 0xc9, 0x28, 0xf6, 0x7a,
	0x25, 0x84, 0x22, 0x7c, 0x5d, 0xbe, 0xae, 0x95, 0x1a, 0x64, 0x8e, 0xd8, 0x42, 0xb3, 0xd7, 0x2f,
	0x65, 0x14, 0xe1, 0x9b, 0xfd, 0xee, 0x8c, 0x17, 0x74, 0x25, 0x97, 0x9e, 0xbd, 0x93, 0x72, 0x48,
	0xd1, 0xfb, 0x86, 0xf9, 0xeb, 0x6e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x62, 0x4e, 0xde, 0x8f,
	0x89, 0x03, 0x00, 0x00,
}
