// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authen.proto

/*
Package Authenrpc is a generated protocol buffer package.

It is generated from these files:
	authen.proto

It has these top-level messages:
	AuthenAndClasifyReq
	AuthenAndClasifyResp
	AddHourReq
	AddHourResp
	SelectAllHourReq
	SelectAllHourResp
	SelectHourByStaffIDReq
	SelectHourByStaffIDResp
*/
package Authenrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthenAndClasifyReq struct {
	Staffid  int64  `protobuf:"varint,1,opt,name=staffid" json:"staffid,omitempty"`
	Passwd   string `protobuf:"bytes,2,opt,name=passwd" json:"passwd,omitempty"`
	Position int64  `protobuf:"varint,3,opt,name=position" json:"position,omitempty"`
}

func (m *AuthenAndClasifyReq) Reset()                    { *m = AuthenAndClasifyReq{} }
func (m *AuthenAndClasifyReq) String() string            { return proto.CompactTextString(m) }
func (*AuthenAndClasifyReq) ProtoMessage()               {}
func (*AuthenAndClasifyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthenAndClasifyReq) GetStaffid() int64 {
	if m != nil {
		return m.Staffid
	}
	return 0
}

func (m *AuthenAndClasifyReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *AuthenAndClasifyReq) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type AuthenAndClasifyResp struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *AuthenAndClasifyResp) Reset()                    { *m = AuthenAndClasifyResp{} }
func (m *AuthenAndClasifyResp) String() string            { return proto.CompactTextString(m) }
func (*AuthenAndClasifyResp) ProtoMessage()               {}
func (*AuthenAndClasifyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthenAndClasifyResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AddHourReq struct {
	Id      int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Staffid int64 `protobuf:"varint,2,opt,name=staffid" json:"staffid,omitempty"`
	In      int64 `protobuf:"varint,3,opt,name=in" json:"in,omitempty"`
	Out     int64 `protobuf:"varint,4,opt,name=out" json:"out,omitempty"`
}

func (m *AddHourReq) Reset()                    { *m = AddHourReq{} }
func (m *AddHourReq) String() string            { return proto.CompactTextString(m) }
func (*AddHourReq) ProtoMessage()               {}
func (*AddHourReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddHourReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddHourReq) GetStaffid() int64 {
	if m != nil {
		return m.Staffid
	}
	return 0
}

func (m *AddHourReq) GetIn() int64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *AddHourReq) GetOut() int64 {
	if m != nil {
		return m.Out
	}
	return 0
}

type AddHourResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddHourResp) Reset()                    { *m = AddHourResp{} }
func (m *AddHourResp) String() string            { return proto.CompactTextString(m) }
func (*AddHourResp) ProtoMessage()               {}
func (*AddHourResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddHourResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllHourReq struct {
}

func (m *SelectAllHourReq) Reset()                    { *m = SelectAllHourReq{} }
func (m *SelectAllHourReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllHourReq) ProtoMessage()               {}
func (*SelectAllHourReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SelectAllHourResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllHourResp) Reset()                    { *m = SelectAllHourResp{} }
func (m *SelectAllHourResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllHourResp) ProtoMessage()               {}
func (*SelectAllHourResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SelectAllHourResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectHourByStaffIDReq struct {
	Staffid int64 `protobuf:"varint,1,opt,name=staffid" json:"staffid,omitempty"`
}

func (m *SelectHourByStaffIDReq) Reset()                    { *m = SelectHourByStaffIDReq{} }
func (m *SelectHourByStaffIDReq) String() string            { return proto.CompactTextString(m) }
func (*SelectHourByStaffIDReq) ProtoMessage()               {}
func (*SelectHourByStaffIDReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SelectHourByStaffIDReq) GetStaffid() int64 {
	if m != nil {
		return m.Staffid
	}
	return 0
}

type SelectHourByStaffIDResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectHourByStaffIDResp) Reset()                    { *m = SelectHourByStaffIDResp{} }
func (m *SelectHourByStaffIDResp) String() string            { return proto.CompactTextString(m) }
func (*SelectHourByStaffIDResp) ProtoMessage()               {}
func (*SelectHourByStaffIDResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectHourByStaffIDResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthenAndClasifyReq)(nil), "Authenrpc.AuthenAndClasifyReq")
	proto.RegisterType((*AuthenAndClasifyResp)(nil), "Authenrpc.AuthenAndClasifyResp")
	proto.RegisterType((*AddHourReq)(nil), "Authenrpc.AddHourReq")
	proto.RegisterType((*AddHourResp)(nil), "Authenrpc.AddHourResp")
	proto.RegisterType((*SelectAllHourReq)(nil), "Authenrpc.SelectAllHourReq")
	proto.RegisterType((*SelectAllHourResp)(nil), "Authenrpc.SelectAllHourResp")
	proto.RegisterType((*SelectHourByStaffIDReq)(nil), "Authenrpc.SelectHourByStaffIDReq")
	proto.RegisterType((*SelectHourByStaffIDResp)(nil), "Authenrpc.SelectHourByStaffIDResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Authen service

type AuthenClient interface {
	AuthenAndClasify(ctx context.Context, in *AuthenAndClasifyReq, opts ...grpc.CallOption) (*AuthenAndClasifyResp, error)
	AddHour(ctx context.Context, in *AddHourReq, opts ...grpc.CallOption) (*AddHourResp, error)
	SelectAllHour(ctx context.Context, in *SelectAllHourReq, opts ...grpc.CallOption) (*SelectAllHourResp, error)
	SelectHourByStaffID(ctx context.Context, in *SelectHourByStaffIDReq, opts ...grpc.CallOption) (*SelectHourByStaffIDResp, error)
}

type authenClient struct {
	cc *grpc.ClientConn
}

func NewAuthenClient(cc *grpc.ClientConn) AuthenClient {
	return &authenClient{cc}
}

func (c *authenClient) AuthenAndClasify(ctx context.Context, in *AuthenAndClasifyReq, opts ...grpc.CallOption) (*AuthenAndClasifyResp, error) {
	out := new(AuthenAndClasifyResp)
	err := grpc.Invoke(ctx, "/Authenrpc.Authen/AuthenAndClasify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) AddHour(ctx context.Context, in *AddHourReq, opts ...grpc.CallOption) (*AddHourResp, error) {
	out := new(AddHourResp)
	err := grpc.Invoke(ctx, "/Authenrpc.Authen/AddHour", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) SelectAllHour(ctx context.Context, in *SelectAllHourReq, opts ...grpc.CallOption) (*SelectAllHourResp, error) {
	out := new(SelectAllHourResp)
	err := grpc.Invoke(ctx, "/Authenrpc.Authen/SelectAllHour", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) SelectHourByStaffID(ctx context.Context, in *SelectHourByStaffIDReq, opts ...grpc.CallOption) (*SelectHourByStaffIDResp, error) {
	out := new(SelectHourByStaffIDResp)
	err := grpc.Invoke(ctx, "/Authenrpc.Authen/SelectHourByStaffID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authen service

type AuthenServer interface {
	AuthenAndClasify(context.Context, *AuthenAndClasifyReq) (*AuthenAndClasifyResp, error)
	AddHour(context.Context, *AddHourReq) (*AddHourResp, error)
	SelectAllHour(context.Context, *SelectAllHourReq) (*SelectAllHourResp, error)
	SelectHourByStaffID(context.Context, *SelectHourByStaffIDReq) (*SelectHourByStaffIDResp, error)
}

func RegisterAuthenServer(s *grpc.Server, srv AuthenServer) {
	s.RegisterService(&_Authen_serviceDesc, srv)
}

func _Authen_AuthenAndClasify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenAndClasifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).AuthenAndClasify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authenrpc.Authen/AuthenAndClasify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).AuthenAndClasify(ctx, req.(*AuthenAndClasifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_AddHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHourReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).AddHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authenrpc.Authen/AddHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).AddHour(ctx, req.(*AddHourReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_SelectAllHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllHourReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).SelectAllHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authenrpc.Authen/SelectAllHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).SelectAllHour(ctx, req.(*SelectAllHourReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_SelectHourByStaffID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectHourByStaffIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).SelectHourByStaffID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authenrpc.Authen/SelectHourByStaffID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).SelectHourByStaffID(ctx, req.(*SelectHourByStaffIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Authenrpc.Authen",
	HandlerType: (*AuthenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenAndClasify",
			Handler:    _Authen_AuthenAndClasify_Handler,
		},
		{
			MethodName: "AddHour",
			Handler:    _Authen_AddHour_Handler,
		},
		{
			MethodName: "SelectAllHour",
			Handler:    _Authen_SelectAllHour_Handler,
		},
		{
			MethodName: "SelectHourByStaffID",
			Handler:    _Authen_SelectHourByStaffID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authen.proto",
}

func init() { proto.RegisterFile("authen.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x0d, 0xcb, 0x17, 0x0a, 0xf3, 0x21, 0xc1, 0x41, 0xb1, 0xa9, 0x46, 0x71, 0x0f, 0xca, 0x45,
	0x0e, 0x70, 0xf1, 0x5a, 0xf5, 0xa0, 0x9e, 0x4c, 0x7b, 0xf1, 0xe0, 0xa5, 0xb6, 0x25, 0x36, 0x34,
	0xdd, 0x95, 0x69, 0x63, 0xf8, 0x79, 0xfe, 0x33, 0xb3, 0xdd, 0xd2, 0x40, 0xa9, 0x78, 0xdb, 0x37,
	0xf3, 0x66, 0xde, 0xcb, 0x9b, 0x2c, 0x74, 0xbd, 0x2c, 0xfd, 0x08, 0x93, 0x89, 0x5c, 0x8a, 0x54,
	0x60, 0xc7, 0xce, 0xd1, 0x52, 0xfa, 0xdc, 0x87, 0x81, 0x06, 0x76, 0x12, 0xdc, 0xc7, 0x1e, 0x45,
	0xf3, 0x95, 0x13, 0x7e, 0xa2, 0x09, 0x06, 0xa5, 0xde, 0x7c, 0x1e, 0x05, 0x66, 0x63, 0xd4, 0x18,
	0x37, 0x9d, 0x35, 0xc4, 0x21, 0xb4, 0xa4, 0x47, 0xf4, 0x15, 0x98, 0x6c, 0xd4, 0x18, 0x77, 0x9c,
	0x02, 0xa1, 0x05, 0x6d, 0x29, 0x28, 0x4a, 0x23, 0x91, 0x98, 0xcd, 0x7c, 0xa4, 0xc4, 0xfc, 0x0a,
	0x8e, 0x76, 0x45, 0x48, 0x62, 0x0f, 0x98, 0x58, 0xe4, 0x02, 0x6d, 0x87, 0x89, 0x05, 0x7f, 0x05,
	0xb0, 0x83, 0xe0, 0x51, 0x64, 0x4b, 0xe5, 0xa1, 0x07, 0xac, 0x94, 0x67, 0x51, 0xb0, 0xe9, 0x89,
	0x6d, 0x7b, 0x52, 0xcc, 0xb5, 0x2a, 0x8b, 0x12, 0xec, 0x43, 0x53, 0x64, 0xa9, 0xf9, 0x2f, 0x2f,
	0xa8, 0x27, 0xbf, 0x86, 0xff, 0xe5, 0x66, 0x92, 0x6a, 0x95, 0x9b, 0xf9, 0x7e, 0x48, 0x54, 0xa8,
	0x1b, 0xa4, 0x21, 0x47, 0xe8, 0xbb, 0x61, 0x1c, 0xfa, 0xa9, 0x1d, 0xc7, 0x85, 0x11, 0x7e, 0x03,
	0x87, 0x95, 0x9a, 0x5e, 0xf1, 0xe2, 0xad, 0x62, 0xe1, 0x69, 0x8b, 0x5d, 0xc7, 0x90, 0x1a, 0xf2,
	0x29, 0x0c, 0x35, 0x5d, 0x71, 0xef, 0x56, 0xae, 0x32, 0xf9, 0xf4, 0xb0, 0x37, 0x55, 0x3e, 0x83,
	0x93, 0xda, 0x99, 0x7d, 0x42, 0xd3, 0x6f, 0x06, 0x2d, 0x9d, 0x2b, 0xba, 0xd0, 0xaf, 0x26, 0x8c,
	0xe7, 0x93, 0xf2, 0xcc, 0x93, 0x9a, 0x1b, 0x5b, 0x17, 0x7b, 0xfb, 0x24, 0xf1, 0x16, 0x8c, 0x22,
	0x34, 0x3c, 0xde, 0xe4, 0x96, 0x27, 0xb2, 0x86, 0x75, 0x65, 0x92, 0xf8, 0x0c, 0x07, 0x5b, 0x89,
	0xe1, 0xe9, 0x06, 0xb1, 0x9a, 0xaf, 0x75, 0xf6, 0x7b, 0x93, 0x24, 0xbe, 0xc1, 0xa0, 0x26, 0x1a,
	0xbc, 0xdc, 0x19, 0xaa, 0xc6, 0x6d, 0xf1, 0xbf, 0x28, 0x24, 0xdf, 0x5b, 0xf9, 0x8f, 0x98, 0xfd,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x62, 0x2e, 0x5a, 0x30, 0x21, 0x03, 0x00, 0x00,
}
