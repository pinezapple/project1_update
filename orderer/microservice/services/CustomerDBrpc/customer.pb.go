// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer.proto

/*
Package CustomerDBrpc is a generated protocol buffer package.

It is generated from these files:
	customer.proto

It has these top-level messages:
	AddReq
	AddResp
	UpdateReq
	UpdateResp
	DelReq
	DelResp
	CusExistReq
	CusExistResp
	AddToBalanceReq
	AddToBalanceResp
	SelectAllReq
	SelectAllResp
	SelectByIDReq
	SelectByIDResp
	SelectByNameReq
	SelectByNameResp
	SelectByPhoneNumReq
	SelectByPhoneNumResp
*/
package CustomerDBrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddReq struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phonenum string `protobuf:"bytes,3,opt,name=phonenum" json:"phonenum,omitempty"`
	Balance  int64  `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
	Level    int32  `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
}

func (m *AddReq) Reset()                    { *m = AddReq{} }
func (m *AddReq) String() string            { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()               {}
func (*AddReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddReq) GetPhonenum() string {
	if m != nil {
		return m.Phonenum
	}
	return ""
}

func (m *AddReq) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type AddResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddResp) Reset()                    { *m = AddResp{} }
func (m *AddResp) String() string            { return proto.CompactTextString(m) }
func (*AddResp) ProtoMessage()               {}
func (*AddResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateReq struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phonenum string `protobuf:"bytes,3,opt,name=phonenum" json:"phonenum,omitempty"`
	Balance  int64  `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
	Level    int32  `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
}

func (m *UpdateReq) Reset()                    { *m = UpdateReq{} }
func (m *UpdateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()               {}
func (*UpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReq) GetPhonenum() string {
	if m != nil {
		return m.Phonenum
	}
	return ""
}

func (m *UpdateReq) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *UpdateReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type UpdateResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateResp) Reset()                    { *m = UpdateResp{} }
func (m *UpdateResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateResp) ProtoMessage()               {}
func (*UpdateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelReq) Reset()                    { *m = DelReq{} }
func (m *DelReq) String() string            { return proto.CompactTextString(m) }
func (*DelReq) ProtoMessage()               {}
func (*DelReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelResp) Reset()                    { *m = DelResp{} }
func (m *DelResp) String() string            { return proto.CompactTextString(m) }
func (*DelResp) ProtoMessage()               {}
func (*DelResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DelResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CusExistReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CusExistReq) Reset()                    { *m = CusExistReq{} }
func (m *CusExistReq) String() string            { return proto.CompactTextString(m) }
func (*CusExistReq) ProtoMessage()               {}
func (*CusExistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CusExistReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CusExistResp struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *CusExistResp) Reset()                    { *m = CusExistResp{} }
func (m *CusExistResp) String() string            { return proto.CompactTextString(m) }
func (*CusExistResp) ProtoMessage()               {}
func (*CusExistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CusExistResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AddToBalanceReq struct {
	Id     int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Amount int64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *AddToBalanceReq) Reset()                    { *m = AddToBalanceReq{} }
func (m *AddToBalanceReq) String() string            { return proto.CompactTextString(m) }
func (*AddToBalanceReq) ProtoMessage()               {}
func (*AddToBalanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddToBalanceReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddToBalanceReq) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type AddToBalanceResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddToBalanceResp) Reset()                    { *m = AddToBalanceResp{} }
func (m *AddToBalanceResp) String() string            { return proto.CompactTextString(m) }
func (*AddToBalanceResp) ProtoMessage()               {}
func (*AddToBalanceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddToBalanceResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllReq struct {
}

func (m *SelectAllReq) Reset()                    { *m = SelectAllReq{} }
func (m *SelectAllReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllReq) ProtoMessage()               {}
func (*SelectAllReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type SelectAllResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SelectAllResp) Reset()                    { *m = SelectAllResp{} }
func (m *SelectAllResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllResp) ProtoMessage()               {}
func (*SelectAllResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectAllResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByIDReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectByIDReq) Reset()                    { *m = SelectByIDReq{} }
func (m *SelectByIDReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDReq) ProtoMessage()               {}
func (*SelectByIDReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SelectByIDReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectByIDResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SelectByIDResp) Reset()                    { *m = SelectByIDResp{} }
func (m *SelectByIDResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDResp) ProtoMessage()               {}
func (*SelectByIDResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SelectByIDResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByNameReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SelectByNameReq) Reset()                    { *m = SelectByNameReq{} }
func (m *SelectByNameReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByNameReq) ProtoMessage()               {}
func (*SelectByNameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SelectByNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SelectByNameResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SelectByNameResp) Reset()                    { *m = SelectByNameResp{} }
func (m *SelectByNameResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByNameResp) ProtoMessage()               {}
func (*SelectByNameResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SelectByNameResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByPhoneNumReq struct {
	Phonenum string `protobuf:"bytes,1,opt,name=phonenum" json:"phonenum,omitempty"`
}

func (m *SelectByPhoneNumReq) Reset()                    { *m = SelectByPhoneNumReq{} }
func (m *SelectByPhoneNumReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByPhoneNumReq) ProtoMessage()               {}
func (*SelectByPhoneNumReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SelectByPhoneNumReq) GetPhonenum() string {
	if m != nil {
		return m.Phonenum
	}
	return ""
}

type SelectByPhoneNumResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SelectByPhoneNumResp) Reset()                    { *m = SelectByPhoneNumResp{} }
func (m *SelectByPhoneNumResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByPhoneNumResp) ProtoMessage()               {}
func (*SelectByPhoneNumResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SelectByPhoneNumResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddReq)(nil), "CustomerDBrpc.AddReq")
	proto.RegisterType((*AddResp)(nil), "CustomerDBrpc.AddResp")
	proto.RegisterType((*UpdateReq)(nil), "CustomerDBrpc.UpdateReq")
	proto.RegisterType((*UpdateResp)(nil), "CustomerDBrpc.UpdateResp")
	proto.RegisterType((*DelReq)(nil), "CustomerDBrpc.DelReq")
	proto.RegisterType((*DelResp)(nil), "CustomerDBrpc.DelResp")
	proto.RegisterType((*CusExistReq)(nil), "CustomerDBrpc.CusExistReq")
	proto.RegisterType((*CusExistResp)(nil), "CustomerDBrpc.CusExistResp")
	proto.RegisterType((*AddToBalanceReq)(nil), "CustomerDBrpc.AddToBalanceReq")
	proto.RegisterType((*AddToBalanceResp)(nil), "CustomerDBrpc.AddToBalanceResp")
	proto.RegisterType((*SelectAllReq)(nil), "CustomerDBrpc.SelectAllReq")
	proto.RegisterType((*SelectAllResp)(nil), "CustomerDBrpc.SelectAllResp")
	proto.RegisterType((*SelectByIDReq)(nil), "CustomerDBrpc.SelectByIDReq")
	proto.RegisterType((*SelectByIDResp)(nil), "CustomerDBrpc.SelectByIDResp")
	proto.RegisterType((*SelectByNameReq)(nil), "CustomerDBrpc.SelectByNameReq")
	proto.RegisterType((*SelectByNameResp)(nil), "CustomerDBrpc.SelectByNameResp")
	proto.RegisterType((*SelectByPhoneNumReq)(nil), "CustomerDBrpc.SelectByPhoneNumReq")
	proto.RegisterType((*SelectByPhoneNumResp)(nil), "CustomerDBrpc.SelectByPhoneNumResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Customer service

type CustomerClient interface {
	AddCus(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	UpdateCus(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	DelCus(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error)
	IfCusExist(ctx context.Context, in *CusExistReq, opts ...grpc.CallOption) (*CusExistResp, error)
	AddToCusBalance(ctx context.Context, in *AddToBalanceReq, opts ...grpc.CallOption) (*AddToBalanceResp, error)
	SelectAllCus(ctx context.Context, in *SelectAllReq, opts ...grpc.CallOption) (*SelectAllResp, error)
	SelectByCusID(ctx context.Context, in *SelectByIDReq, opts ...grpc.CallOption) (*SelectByIDResp, error)
	SelectByCusName(ctx context.Context, in *SelectByNameReq, opts ...grpc.CallOption) (*SelectByNameResp, error)
	SelectByCusPhoneNum(ctx context.Context, in *SelectByPhoneNumReq, opts ...grpc.CallOption) (*SelectByPhoneNumResp, error)
}

type customerClient struct {
	cc *grpc.ClientConn
}

func NewCustomerClient(cc *grpc.ClientConn) CustomerClient {
	return &customerClient{cc}
}

func (c *customerClient) AddCus(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/AddCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) UpdateCus(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/UpdateCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) DelCus(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelResp, error) {
	out := new(DelResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/DelCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) IfCusExist(ctx context.Context, in *CusExistReq, opts ...grpc.CallOption) (*CusExistResp, error) {
	out := new(CusExistResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/IfCusExist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) AddToCusBalance(ctx context.Context, in *AddToBalanceReq, opts ...grpc.CallOption) (*AddToBalanceResp, error) {
	out := new(AddToBalanceResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/AddToCusBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) SelectAllCus(ctx context.Context, in *SelectAllReq, opts ...grpc.CallOption) (*SelectAllResp, error) {
	out := new(SelectAllResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/SelectAllCus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) SelectByCusID(ctx context.Context, in *SelectByIDReq, opts ...grpc.CallOption) (*SelectByIDResp, error) {
	out := new(SelectByIDResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/SelectByCusID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) SelectByCusName(ctx context.Context, in *SelectByNameReq, opts ...grpc.CallOption) (*SelectByNameResp, error) {
	out := new(SelectByNameResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/SelectByCusName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) SelectByCusPhoneNum(ctx context.Context, in *SelectByPhoneNumReq, opts ...grpc.CallOption) (*SelectByPhoneNumResp, error) {
	out := new(SelectByPhoneNumResp)
	err := grpc.Invoke(ctx, "/CustomerDBrpc.customer/SelectByCusPhoneNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Customer service

type CustomerServer interface {
	AddCus(context.Context, *AddReq) (*AddResp, error)
	UpdateCus(context.Context, *UpdateReq) (*UpdateResp, error)
	DelCus(context.Context, *DelReq) (*DelResp, error)
	IfCusExist(context.Context, *CusExistReq) (*CusExistResp, error)
	AddToCusBalance(context.Context, *AddToBalanceReq) (*AddToBalanceResp, error)
	SelectAllCus(context.Context, *SelectAllReq) (*SelectAllResp, error)
	SelectByCusID(context.Context, *SelectByIDReq) (*SelectByIDResp, error)
	SelectByCusName(context.Context, *SelectByNameReq) (*SelectByNameResp, error)
	SelectByCusPhoneNum(context.Context, *SelectByPhoneNumReq) (*SelectByPhoneNumResp, error)
}

func RegisterCustomerServer(s *grpc.Server, srv CustomerServer) {
	s.RegisterService(&_Customer_serviceDesc, srv)
}

func _Customer_AddCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).AddCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/AddCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).AddCus(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_UpdateCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).UpdateCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/UpdateCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).UpdateCus(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_DelCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).DelCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/DelCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).DelCus(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_IfCusExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CusExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).IfCusExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/IfCusExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).IfCusExist(ctx, req.(*CusExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_AddToCusBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).AddToCusBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/AddToCusBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).AddToCusBalance(ctx, req.(*AddToBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_SelectAllCus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).SelectAllCus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/SelectAllCus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).SelectAllCus(ctx, req.(*SelectAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_SelectByCusID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).SelectByCusID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/SelectByCusID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).SelectByCusID(ctx, req.(*SelectByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_SelectByCusName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).SelectByCusName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/SelectByCusName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).SelectByCusName(ctx, req.(*SelectByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_SelectByCusPhoneNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByPhoneNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).SelectByCusPhoneNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerDBrpc.customer/SelectByCusPhoneNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).SelectByCusPhoneNum(ctx, req.(*SelectByPhoneNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Customer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerDBrpc.customer",
	HandlerType: (*CustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCus",
			Handler:    _Customer_AddCus_Handler,
		},
		{
			MethodName: "UpdateCus",
			Handler:    _Customer_UpdateCus_Handler,
		},
		{
			MethodName: "DelCus",
			Handler:    _Customer_DelCus_Handler,
		},
		{
			MethodName: "IfCusExist",
			Handler:    _Customer_IfCusExist_Handler,
		},
		{
			MethodName: "AddToCusBalance",
			Handler:    _Customer_AddToCusBalance_Handler,
		},
		{
			MethodName: "SelectAllCus",
			Handler:    _Customer_SelectAllCus_Handler,
		},
		{
			MethodName: "SelectByCusID",
			Handler:    _Customer_SelectByCusID_Handler,
		},
		{
			MethodName: "SelectByCusName",
			Handler:    _Customer_SelectByCusName_Handler,
		},
		{
			MethodName: "SelectByCusPhoneNum",
			Handler:    _Customer_SelectByCusPhoneNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

func init() { proto.RegisterFile("customer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xc7, 0xe5, 0xa4, 0x79, 0x74, 0x48, 0x53, 0xb4, 0x94, 0xca, 0x18, 0xda, 0x46, 0xae, 0x40,
	0x01, 0xa1, 0x88, 0xc7, 0x01, 0x71, 0x23, 0xb1, 0x7b, 0x88, 0x84, 0x2a, 0xe4, 0xc2, 0x15, 0xc9,
	0xb5, 0x17, 0x11, 0xd5, 0xf6, 0x2e, 0x19, 0x2f, 0x6a, 0xc5, 0xf7, 0xe1, 0x73, 0xa2, 0x5d, 0x7b,
	0x93, 0x4d, 0xec, 0x98, 0x63, 0x6f, 0x19, 0xcf, 0x7f, 0x1e, 0xff, 0xd5, 0x6f, 0x14, 0x18, 0x46,
	0x02, 0x73, 0x96, 0xd2, 0xe5, 0x84, 0x2f, 0x59, 0xce, 0xc8, 0x81, 0x57, 0xc6, 0xfe, 0x6c, 0xc9,
	0x23, 0xf7, 0x16, 0xba, 0xd3, 0x38, 0x0e, 0xe8, 0x2f, 0x32, 0x84, 0xd6, 0x22, 0xb6, 0xad, 0x91,
	0x35, 0x6e, 0x07, 0xad, 0x45, 0x4c, 0x08, 0xec, 0x65, 0x61, 0x4a, 0xed, 0xd6, 0xc8, 0x1a, 0xef,
	0x07, 0xea, 0x37, 0x71, 0xa0, 0xcf, 0x7f, 0xb2, 0x8c, 0x66, 0x22, 0xb5, 0xdb, 0xea, 0xfb, 0x2a,
	0x26, 0x36, 0xf4, 0xae, 0xc3, 0x24, 0xcc, 0x22, 0x6a, 0xef, 0xa9, 0x26, 0x3a, 0x24, 0x47, 0xd0,
	0x49, 0xe8, 0x6f, 0x9a, 0xd8, 0x9d, 0x91, 0x35, 0xee, 0x04, 0x45, 0xe0, 0x9e, 0x43, 0x4f, 0x4d,
	0x46, 0x2e, 0x4b, 0xaf, 0x44, 0x14, 0x51, 0x44, 0x35, 0xbf, 0x1f, 0xf4, 0xb0, 0x08, 0xdd, 0x3f,
	0xb0, 0xff, 0x8d, 0xc7, 0x61, 0x4e, 0xef, 0x63, 0xc3, 0x17, 0x00, 0x7a, 0x78, 0xe3, 0x92, 0x36,
	0x74, 0x7d, 0x9a, 0xd4, 0x6c, 0x28, 0x3d, 0xaa, 0x4c, 0x63, 0xf9, 0x09, 0x3c, 0xf0, 0x04, 0x5e,
	0xdc, 0x2e, 0x30, 0xaf, 0xeb, 0x71, 0x0a, 0x83, 0x75, 0x1a, 0xb9, 0xcc, 0xb3, 0x9b, 0xb2, 0x47,
	0x8b, 0xdd, 0xb8, 0x1f, 0xe1, 0x70, 0x1a, 0xc7, 0x5f, 0xd9, 0xac, 0xf0, 0x52, 0xf7, 0x50, 0xc7,
	0xd0, 0x0d, 0x53, 0x26, 0xb2, 0x5c, 0x3d, 0x55, 0x3b, 0x28, 0x23, 0xf7, 0x35, 0x3c, 0xdc, 0x2c,
	0x6d, 0xdc, 0x73, 0x08, 0x83, 0x2b, 0x9a, 0xd0, 0x28, 0x9f, 0x26, 0xd2, 0xac, 0xfb, 0x12, 0x0e,
	0x8c, 0xb8, 0x28, 0xe5, 0xe1, 0x5d, 0xc2, 0xc2, 0x62, 0xf6, 0x20, 0xd0, 0xa1, 0x7b, 0xa6, 0xa5,
	0xb3, 0xbb, 0xb9, 0x5f, 0x67, 0xf2, 0x15, 0x0c, 0x4d, 0x41, 0x63, 0xb3, 0xe7, 0x70, 0xa8, 0xb5,
	0x97, 0x61, 0xaa, 0x0c, 0x6b, 0x12, 0xac, 0x35, 0x09, 0xd2, 0xdc, 0xa6, 0xac, 0xb1, 0xe9, 0x5b,
	0x78, 0xa4, 0xd5, 0x5f, 0x24, 0x2f, 0x97, 0x22, 0x95, 0x8d, 0x4d, 0x9c, 0xac, 0x4d, 0x9c, 0xdc,
	0x37, 0x70, 0x54, 0x2d, 0x69, 0x1a, 0xf2, 0xee, 0x6f, 0x07, 0xfa, 0xfa, 0x1c, 0xc9, 0x07, 0x75,
	0x79, 0x9e, 0x40, 0xf2, 0x78, 0xb2, 0x71, 0x93, 0x93, 0xe2, 0x20, 0x9d, 0xe3, 0xba, 0xcf, 0xc8,
	0xc9, 0x27, 0x7d, 0x13, 0xb2, 0xd6, 0xde, 0x12, 0xad, 0xae, 0xc5, 0x79, 0xb2, 0x23, 0x83, 0x5c,
	0x8e, 0xf6, 0x69, 0x52, 0x37, 0xba, 0xe0, 0xb8, 0x32, 0x5a, 0x43, 0x7c, 0x01, 0x30, 0xff, 0xa1,
	0x69, 0x24, 0xce, 0x96, 0xca, 0xa0, 0xd8, 0x79, 0xba, 0x33, 0x87, 0x9c, 0x04, 0x25, 0xb2, 0x9e,
	0xc0, 0x12, 0x3d, 0x72, 0x5a, 0x35, 0x6b, 0x22, 0xed, 0x9c, 0x35, 0xe6, 0x91, 0x93, 0xb9, 0x41,
	0xa7, 0x74, 0xb6, 0xbd, 0x80, 0x89, 0xae, 0xf3, 0x6c, 0x77, 0x12, 0x39, 0xf9, 0xbc, 0xa6, 0xd5,
	0x13, 0x38, 0xf7, 0x49, 0xbd, 0xbc, 0x64, 0xd9, 0x39, 0x69, 0xc8, 0x16, 0x66, 0x8d, 0x6e, 0x12,
	0xc5, 0x8a, 0xd9, 0x2d, 0x9c, 0x2b, 0x66, 0x2b, 0x1c, 0x7f, 0x5f, 0xd3, 0xea, 0x09, 0xd4, 0xf4,
	0x11, 0x77, 0x47, 0x9d, 0x41, 0xb4, 0x73, 0xfe, 0x5f, 0x0d, 0xf2, 0xeb, 0xae, 0xfa, 0xaf, 0x78,
	0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x06, 0xb5, 0x0b, 0xe3, 0x3d, 0x06, 0x00, 0x00,
}
