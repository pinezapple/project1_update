// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer.proto

/*
Package Orderrpc is a generated protocol buffer package.

It is generated from these files:
	orderer.proto

It has these top-level messages:
	AddDSReq
	AddDSResp
	DelDSReq
	DelDSResp
	UpdateDSReq
	UpdateDSResp
	SelectAllDSReq
	SelectAllDSResp
	SelectByIDDSReq
	SelectByIDDSResp
	SelectByCreatedAtDSReq
	SelectByCreatedAtDSResp
*/
package Orderrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddDSReq struct {
	SellerName     string `protobuf:"bytes,1,opt,name=seller_name,json=sellerName" json:"seller_name,omitempty"`
	CusName        string `protobuf:"bytes,2,opt,name=cus_name,json=cusName" json:"cus_name,omitempty"`
	GoodList       []byte `protobuf:"bytes,3,opt,name=good_list,json=goodList,proto3" json:"good_list,omitempty"`
	GoodListAmount []byte `protobuf:"bytes,4,opt,name=good_list_amount,json=goodListAmount,proto3" json:"good_list_amount,omitempty"`
	TotalMoney     int64  `protobuf:"varint,5,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *AddDSReq) Reset()                    { *m = AddDSReq{} }
func (m *AddDSReq) String() string            { return proto.CompactTextString(m) }
func (*AddDSReq) ProtoMessage()               {}
func (*AddDSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDSReq) GetSellerName() string {
	if m != nil {
		return m.SellerName
	}
	return ""
}

func (m *AddDSReq) GetCusName() string {
	if m != nil {
		return m.CusName
	}
	return ""
}

func (m *AddDSReq) GetGoodList() []byte {
	if m != nil {
		return m.GoodList
	}
	return nil
}

func (m *AddDSReq) GetGoodListAmount() []byte {
	if m != nil {
		return m.GoodListAmount
	}
	return nil
}

func (m *AddDSReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type AddDSResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AddDSResp) Reset()                    { *m = AddDSResp{} }
func (m *AddDSResp) String() string            { return proto.CompactTextString(m) }
func (*AddDSResp) ProtoMessage()               {}
func (*AddDSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddDSResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DelDSReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelDSReq) Reset()                    { *m = DelDSReq{} }
func (m *DelDSReq) String() string            { return proto.CompactTextString(m) }
func (*DelDSReq) ProtoMessage()               {}
func (*DelDSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelDSReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelDSResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *DelDSResp) Reset()                    { *m = DelDSResp{} }
func (m *DelDSResp) String() string            { return proto.CompactTextString(m) }
func (*DelDSResp) ProtoMessage()               {}
func (*DelDSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelDSResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateDSReq struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SellerName     string `protobuf:"bytes,2,opt,name=seller_name,json=sellerName" json:"seller_name,omitempty"`
	CusName        string `protobuf:"bytes,3,opt,name=cus_name,json=cusName" json:"cus_name,omitempty"`
	GoodList       []byte `protobuf:"bytes,4,opt,name=good_list,json=goodList,proto3" json:"good_list,omitempty"`
	GoodListAmount []byte `protobuf:"bytes,5,opt,name=good_list_amount,json=goodListAmount,proto3" json:"good_list_amount,omitempty"`
	TotalMoney     int64  `protobuf:"varint,6,opt,name=total_money,json=totalMoney" json:"total_money,omitempty"`
}

func (m *UpdateDSReq) Reset()                    { *m = UpdateDSReq{} }
func (m *UpdateDSReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateDSReq) ProtoMessage()               {}
func (*UpdateDSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateDSReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateDSReq) GetSellerName() string {
	if m != nil {
		return m.SellerName
	}
	return ""
}

func (m *UpdateDSReq) GetCusName() string {
	if m != nil {
		return m.CusName
	}
	return ""
}

func (m *UpdateDSReq) GetGoodList() []byte {
	if m != nil {
		return m.GoodList
	}
	return nil
}

func (m *UpdateDSReq) GetGoodListAmount() []byte {
	if m != nil {
		return m.GoodListAmount
	}
	return nil
}

func (m *UpdateDSReq) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

type UpdateDSResp struct {
	Success bool `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *UpdateDSResp) Reset()                    { *m = UpdateDSResp{} }
func (m *UpdateDSResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateDSResp) ProtoMessage()               {}
func (*UpdateDSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateDSResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectAllDSReq struct {
}

func (m *SelectAllDSReq) Reset()                    { *m = SelectAllDSReq{} }
func (m *SelectAllDSReq) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDSReq) ProtoMessage()               {}
func (*SelectAllDSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SelectAllDSResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectAllDSResp) Reset()                    { *m = SelectAllDSResp{} }
func (m *SelectAllDSResp) String() string            { return proto.CompactTextString(m) }
func (*SelectAllDSResp) ProtoMessage()               {}
func (*SelectAllDSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectAllDSResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByIDDSReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SelectByIDDSReq) Reset()                    { *m = SelectByIDDSReq{} }
func (m *SelectByIDDSReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDSReq) ProtoMessage()               {}
func (*SelectByIDDSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectByIDDSReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectByIDDSResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByIDDSResp) Reset()                    { *m = SelectByIDDSResp{} }
func (m *SelectByIDDSResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByIDDSResp) ProtoMessage()               {}
func (*SelectByIDDSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectByIDDSResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SelectByCreatedAtDSReq struct {
	FromTime int64 `protobuf:"varint,1,opt,name=from_time,json=fromTime" json:"from_time,omitempty"`
	ToTime   int64 `protobuf:"varint,2,opt,name=to_time,json=toTime" json:"to_time,omitempty"`
}

func (m *SelectByCreatedAtDSReq) Reset()                    { *m = SelectByCreatedAtDSReq{} }
func (m *SelectByCreatedAtDSReq) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDSReq) ProtoMessage()               {}
func (*SelectByCreatedAtDSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SelectByCreatedAtDSReq) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *SelectByCreatedAtDSReq) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

type SelectByCreatedAtDSResp struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *SelectByCreatedAtDSResp) Reset()                    { *m = SelectByCreatedAtDSResp{} }
func (m *SelectByCreatedAtDSResp) String() string            { return proto.CompactTextString(m) }
func (*SelectByCreatedAtDSResp) ProtoMessage()               {}
func (*SelectByCreatedAtDSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectByCreatedAtDSResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDSReq)(nil), "Orderrpc.AddDSReq")
	proto.RegisterType((*AddDSResp)(nil), "Orderrpc.AddDSResp")
	proto.RegisterType((*DelDSReq)(nil), "Orderrpc.DelDSReq")
	proto.RegisterType((*DelDSResp)(nil), "Orderrpc.DelDSResp")
	proto.RegisterType((*UpdateDSReq)(nil), "Orderrpc.UpdateDSReq")
	proto.RegisterType((*UpdateDSResp)(nil), "Orderrpc.UpdateDSResp")
	proto.RegisterType((*SelectAllDSReq)(nil), "Orderrpc.SelectAllDSReq")
	proto.RegisterType((*SelectAllDSResp)(nil), "Orderrpc.SelectAllDSResp")
	proto.RegisterType((*SelectByIDDSReq)(nil), "Orderrpc.SelectByIDDSReq")
	proto.RegisterType((*SelectByIDDSResp)(nil), "Orderrpc.SelectByIDDSResp")
	proto.RegisterType((*SelectByCreatedAtDSReq)(nil), "Orderrpc.SelectByCreatedAtDSReq")
	proto.RegisterType((*SelectByCreatedAtDSResp)(nil), "Orderrpc.SelectByCreatedAtDSResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Orderer service

type OrdererClient interface {
	AddDS(ctx context.Context, in *AddDSReq, opts ...grpc.CallOption) (*AddDSResp, error)
	DelDS(ctx context.Context, in *DelDSReq, opts ...grpc.CallOption) (*DelDSResp, error)
	UpdateDS(ctx context.Context, in *UpdateDSReq, opts ...grpc.CallOption) (*UpdateDSResp, error)
	SelectAllDS(ctx context.Context, in *SelectAllDSReq, opts ...grpc.CallOption) (*SelectAllDSResp, error)
	SelectByIDDS(ctx context.Context, in *SelectByIDDSReq, opts ...grpc.CallOption) (*SelectByIDDSResp, error)
	SelectByCreatedAtDS(ctx context.Context, in *SelectByCreatedAtDSReq, opts ...grpc.CallOption) (*SelectByCreatedAtDSResp, error)
}

type ordererClient struct {
	cc *grpc.ClientConn
}

func NewOrdererClient(cc *grpc.ClientConn) OrdererClient {
	return &ordererClient{cc}
}

func (c *ordererClient) AddDS(ctx context.Context, in *AddDSReq, opts ...grpc.CallOption) (*AddDSResp, error) {
	out := new(AddDSResp)
	err := grpc.Invoke(ctx, "/Orderrpc.orderer/AddDS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) DelDS(ctx context.Context, in *DelDSReq, opts ...grpc.CallOption) (*DelDSResp, error) {
	out := new(DelDSResp)
	err := grpc.Invoke(ctx, "/Orderrpc.orderer/DelDS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) UpdateDS(ctx context.Context, in *UpdateDSReq, opts ...grpc.CallOption) (*UpdateDSResp, error) {
	out := new(UpdateDSResp)
	err := grpc.Invoke(ctx, "/Orderrpc.orderer/UpdateDS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) SelectAllDS(ctx context.Context, in *SelectAllDSReq, opts ...grpc.CallOption) (*SelectAllDSResp, error) {
	out := new(SelectAllDSResp)
	err := grpc.Invoke(ctx, "/Orderrpc.orderer/SelectAllDS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) SelectByIDDS(ctx context.Context, in *SelectByIDDSReq, opts ...grpc.CallOption) (*SelectByIDDSResp, error) {
	out := new(SelectByIDDSResp)
	err := grpc.Invoke(ctx, "/Orderrpc.orderer/SelectByIDDS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) SelectByCreatedAtDS(ctx context.Context, in *SelectByCreatedAtDSReq, opts ...grpc.CallOption) (*SelectByCreatedAtDSResp, error) {
	out := new(SelectByCreatedAtDSResp)
	err := grpc.Invoke(ctx, "/Orderrpc.orderer/SelectByCreatedAtDS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orderer service

type OrdererServer interface {
	AddDS(context.Context, *AddDSReq) (*AddDSResp, error)
	DelDS(context.Context, *DelDSReq) (*DelDSResp, error)
	UpdateDS(context.Context, *UpdateDSReq) (*UpdateDSResp, error)
	SelectAllDS(context.Context, *SelectAllDSReq) (*SelectAllDSResp, error)
	SelectByIDDS(context.Context, *SelectByIDDSReq) (*SelectByIDDSResp, error)
	SelectByCreatedAtDS(context.Context, *SelectByCreatedAtDSReq) (*SelectByCreatedAtDSResp, error)
}

func RegisterOrdererServer(s *grpc.Server, srv OrdererServer) {
	s.RegisterService(&_Orderer_serviceDesc, srv)
}

func _Orderer_AddDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).AddDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Orderrpc.orderer/AddDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).AddDS(ctx, req.(*AddDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_DelDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).DelDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Orderrpc.orderer/DelDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).DelDS(ctx, req.(*DelDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_UpdateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).UpdateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Orderrpc.orderer/UpdateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).UpdateDS(ctx, req.(*UpdateDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_SelectAllDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).SelectAllDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Orderrpc.orderer/SelectAllDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).SelectAllDS(ctx, req.(*SelectAllDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_SelectByIDDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIDDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).SelectByIDDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Orderrpc.orderer/SelectByIDDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).SelectByIDDS(ctx, req.(*SelectByIDDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_SelectByCreatedAtDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByCreatedAtDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).SelectByCreatedAtDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Orderrpc.orderer/SelectByCreatedAtDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).SelectByCreatedAtDS(ctx, req.(*SelectByCreatedAtDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orderer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Orderrpc.orderer",
	HandlerType: (*OrdererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDS",
			Handler:    _Orderer_AddDS_Handler,
		},
		{
			MethodName: "DelDS",
			Handler:    _Orderer_DelDS_Handler,
		},
		{
			MethodName: "UpdateDS",
			Handler:    _Orderer_UpdateDS_Handler,
		},
		{
			MethodName: "SelectAllDS",
			Handler:    _Orderer_SelectAllDS_Handler,
		},
		{
			MethodName: "SelectByIDDS",
			Handler:    _Orderer_SelectByIDDS_Handler,
		},
		{
			MethodName: "SelectByCreatedAtDS",
			Handler:    _Orderer_SelectByCreatedAtDS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderer.proto",
}

func init() { proto.RegisterFile("orderer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0xed, 0x26, 0x76, 0x26, 0x21, 0x44, 0x53, 0xd1, 0xba, 0xee, 0x81, 0xd4, 0x12, 0x92,
	0x25, 0x50, 0x84, 0xe8, 0x89, 0x63, 0x4a, 0x38, 0x20, 0x41, 0x41, 0x0e, 0x5c, 0xb8, 0x58, 0xc6,
	0x1e, 0x90, 0x25, 0x3b, 0xbb, 0x78, 0x37, 0x87, 0x7c, 0x05, 0x7f, 0xc2, 0x3f, 0xf0, 0x67, 0xc8,
	0xbb, 0x71, 0xe3, 0x60, 0xd7, 0xf4, 0xb8, 0xef, 0xbd, 0x19, 0xcd, 0xbe, 0x79, 0xbb, 0xf0, 0x88,
	0x95, 0x29, 0x95, 0x54, 0x2e, 0x78, 0xc9, 0x24, 0x43, 0xe7, 0x63, 0x75, 0x2c, 0x79, 0xe2, 0xff,
	0x36, 0xc0, 0x59, 0xa6, 0xe9, 0x6a, 0x1d, 0xd2, 0x4f, 0x7c, 0x0a, 0x63, 0x41, 0x79, 0x4e, 0x65,
	0xb4, 0x89, 0x0b, 0x72, 0x8d, 0xb9, 0x11, 0x8c, 0x42, 0xd0, 0xd0, 0x6d, 0x5c, 0x10, 0x5e, 0x80,
	0x93, 0x6c, 0x85, 0x66, 0x4d, 0xc5, 0xda, 0xc9, 0x56, 0x28, 0xea, 0x12, 0x46, 0x3f, 0x18, 0x4b,
	0xa3, 0x3c, 0x13, 0xd2, 0xb5, 0xe6, 0x46, 0x30, 0x09, 0x9d, 0x0a, 0x78, 0x9f, 0x09, 0x89, 0x01,
	0xcc, 0xee, 0xc8, 0x28, 0x2e, 0xd8, 0x76, 0x23, 0xdd, 0x13, 0xa5, 0x99, 0xd6, 0x9a, 0xa5, 0x42,
	0xab, 0x11, 0x24, 0x93, 0x71, 0x1e, 0x15, 0x6c, 0x43, 0x3b, 0x77, 0x30, 0x37, 0x02, 0x2b, 0x04,
	0x05, 0x7d, 0xa8, 0x10, 0xff, 0x19, 0x8c, 0xf6, 0xf3, 0x0a, 0x8e, 0x2e, 0xd8, 0xeb, 0x6d, 0x92,
	0x90, 0x10, 0x6a, 0x58, 0x27, 0xb4, 0x85, 0x3e, 0xfa, 0x1e, 0x38, 0x2b, 0xca, 0xf5, 0xb5, 0xa6,
	0x60, 0x66, 0xa9, 0x12, 0x58, 0xa1, 0x99, 0xa5, 0x55, 0x8b, 0x3d, 0xd7, 0xdb, 0xe2, 0x8f, 0x01,
	0xe3, 0x2f, 0x3c, 0x8d, 0x25, 0x75, 0xb6, 0xf9, 0xd7, 0x2d, 0xb3, 0xd7, 0x2d, 0xab, 0xc7, 0xad,
	0x93, 0x07, 0xb8, 0x35, 0x78, 0x88, 0x5b, 0xc3, 0x96, 0x5b, 0x01, 0x4c, 0x0e, 0x57, 0xe8, 0xbd,
	0xed, 0x0c, 0xa6, 0x6b, 0xca, 0x29, 0x91, 0xcb, 0x5c, 0xdb, 0xe6, 0x3f, 0x87, 0xc7, 0x47, 0x88,
	0x2e, 0xff, 0x14, 0xef, 0x72, 0x16, 0x6b, 0x1f, 0x26, 0xa1, 0xcd, 0xf5, 0xd1, 0xbf, 0xaa, 0xc5,
	0x37, 0xbb, 0x77, 0xab, 0x6e, 0xdb, 0x5f, 0xc0, 0xec, 0x58, 0xd2, 0xdb, 0xf0, 0x16, 0xce, 0x6a,
	0xf5, 0x9b, 0x92, 0x62, 0x49, 0xe9, 0x52, 0xea, 0xbe, 0x97, 0x30, 0xfa, 0x5e, 0xb2, 0x22, 0x92,
	0xd9, 0x3e, 0xa3, 0x56, 0xe8, 0x54, 0xc0, 0xe7, 0xac, 0x20, 0x3c, 0x07, 0x5b, 0x32, 0x4d, 0x99,
	0x8a, 0x1a, 0x4a, 0x56, 0x11, 0xfe, 0x35, 0x9c, 0x77, 0xf6, 0xeb, 0x1b, 0xe2, 0xd5, 0x2f, 0x0b,
	0xec, 0xfd, 0xcb, 0xc1, 0x97, 0x30, 0x50, 0xc1, 0x43, 0x5c, 0xd4, 0xaf, 0x67, 0x51, 0xbf, 0x1c,
	0xef, 0xb4, 0x85, 0x09, 0x5e, 0x55, 0xa8, 0x9c, 0x35, 0x2b, 0xea, 0x50, 0x36, 0x2b, 0x0e, 0x61,
	0x7c, 0x0d, 0x4e, 0xbd, 0x2e, 0x7c, 0x72, 0x10, 0x34, 0x52, 0xe8, 0x9d, 0x75, 0xc1, 0x82, 0xe3,
	0x0d, 0x8c, 0x1b, 0xdb, 0x42, 0xf7, 0x20, 0x3b, 0x5e, 0xab, 0x77, 0x71, 0x0f, 0x23, 0x38, 0xbe,
	0x85, 0x49, 0x73, 0x43, 0xd8, 0x92, 0xde, 0x2d, 0xd7, 0xf3, 0xee, 0xa3, 0x04, 0xc7, 0xaf, 0x70,
	0xda, 0x61, 0x35, 0xce, 0xdb, 0x25, 0xc7, 0x9b, 0xf5, 0xae, 0xfe, 0xa3, 0x10, 0xfc, 0xdb, 0x50,
	0x7d, 0x60, 0xd7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xde, 0x32, 0x1f, 0xd1, 0x04, 0x00,
	0x00,
}
